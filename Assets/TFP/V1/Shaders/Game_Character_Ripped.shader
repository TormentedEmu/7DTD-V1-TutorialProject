Shader "Game/Character - Ripped"
{
    Properties {
        [Toggle] _Irradiated ("Irradiated", Float) = 0
        _Albedo ("Albedo", 2D) = "white" {}
        _Normal ("Normal", 2D) = "bump" {}
        _RMOE ("RMOE", 2D) = "white" {}
        _EmissiveColor ("Emissive Color", Color) = (0, 0, 0, 0)
        _Fade ("Fade", Range(0, 1)) = 1
        [HideInInspector] _texcoord ("", 2D) = "white" {}
        [HideInInspector] __dirty ("", Float) = 1
    }
    SubShader {
        Tags {
            "IsEmissive"="true"
            "QUEUE"="Geometry+0"
            "RenderType"="Opaque"
        }
        Pass {
            Name "FORWARD"
            ZClip On
            Tags {
                "IsEmissive"="true"
                "LIGHTMODE"="FORWARDBASE"
                "QUEUE"="Geometry+0"
                "RenderType"="Opaque"
                "SHADOWSUPPORT"="true"
            }
            CGPROGRAM
            
            #pragma vertex vert
            #pragma fragment frag

            #pragma multi_compile DIRECTIONAL
            #pragma shader_feature _ELECTRIC_SHOCK_ON
            #pragma shader_feature FOG_EXP
            #pragma shader_feature LIGHTPROBE_SH
            #pragma shader_feature SHADOWS_SCREEN
            #pragma shader_feature VERTEXLIGHT_ON
            

            #if _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3 = tmp2.wwww * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.w * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3 = tmp2.wwww * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.w * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && LIGHTPROBE_SH && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3 = tmp2.wwww * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp2.w = tmp0.w * 0.5;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.x * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3 = tmp1.zzzz * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.w * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.x * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && LIGHTPROBE_SH && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3 = tmp2.wwww * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp2.w = tmp0.w * 0.5;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.x * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3 = tmp1.zzzz * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.w * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.x * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && LIGHTPROBE_SH && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3 = tmp2.wwww * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp2.w = tmp0.w * 0.5;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.x * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.x * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.x * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && LIGHTPROBE_SH && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_4LightPosX0; // 48 (starting at cb2[3].x)
            // float4 unity_4LightPosY0; // 64 (starting at cb2[4].x)
            // float4 unity_4LightPosZ0; // 80 (starting at cb2[5].x)
            // float4 unity_4LightAtten0; // 96 (starting at cb2[6].x)
            // float4 unity_LightColor[8]; // 112 (starting at cb2[7].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3 = tmp2.wwww * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp4.xyz = tmp0.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.w = tmp0.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.w = tmp0.y;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord3.z = tmp3.w;
                tmp0.w = tmp1.y * _ProjectionParams.x;
                tmp2.w = tmp0.w * 0.5;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = unity_4LightPosX0 - tmp0.xxxx;
                tmp2 = unity_4LightPosY0 - tmp0.yyyy;
                tmp0 = unity_4LightPosZ0 - tmp0.zzzz;
                tmp4 = tmp3.yyyy * tmp2;
                tmp2 = tmp2 * tmp2;
                tmp2 = tmp1 * tmp1 + tmp2;
                tmp1 = tmp1 * tmp3.xxxx + tmp4;
                tmp1 = tmp0 * tmp3.wwzw + tmp1;
                tmp0 = tmp0 * tmp0 + tmp2;
                tmp0 = max(tmp0, float4(0.000001, 0.000001, 0.000001, 0.000001));
                tmp2 = rsqrt(tmp0);
                tmp0 = tmp0 * unity_4LightAtten0 + float4(1.0, 1.0, 1.0, 1.0);
                tmp0 = float4(1.0, 1.0, 1.0, 1.0) / tmp0;
                tmp1 = tmp1 * tmp2;
                tmp1 = max(tmp1, float4(0.0, 0.0, 0.0, 0.0));
                tmp0 = tmp0 * tmp1;
                tmp1.xyz = tmp0.yyy * unity_LightColor[1].xyz;
                tmp1.xyz = unity_LightColor[0].xyz * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_LightColor[2].xyz * tmp0.zzz + tmp1.xyz;
                tmp0.xyz = unity_LightColor[3].xyz * tmp0.www + tmp0.xyz;
                tmp0.w = tmp3.y * tmp3.y;
                tmp0.w = tmp3.x * tmp3.x + -tmp0.w;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                tmp1.xyz = unity_SHC.xyz * tmp0.www + tmp2.xyz;
                o.texcoord5.xyz = tmp0.xyz + tmp1.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && SHADOWS_SCREEN && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.x * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp2.xz = tmp1.xw * float2(0.5, 0.5);
                tmp2.w = tmp0.x * 0.5;
                tmp1.xy = tmp2.zz + tmp2.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.x * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && LIGHTPROBE_SH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.x * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && LIGHTPROBE_SH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float3 texcoord5 : TEXCOORD5;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord5.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord4 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && VERTEXLIGHT_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord6 : TEXCOORD6;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord6.x = tmp1.z;
                o.texcoord4.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp0.x * 0.5;
                o.texcoord4.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #else
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
                float4 texcoord8 : TEXCOORD8;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                o.texcoord8 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }
            #endif


            #if _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogColor; // 0 (starting at cb5[0].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb6[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb6[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb6[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb6[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb6[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb6[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb6[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb6[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb7[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb7[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb7[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb7[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4
            sampler2D _ShadowMapTexture; // 5
            sampler2D NGSS_FrustumShadowsTexture; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp4.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp4.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp4.w = tmp7.y * 0.25 + 0.75;
                    tmp5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp4.w, tmp5.x);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp4.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp5.x = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp5.x = min(tmp5.x, tmp7.x);
                tmp5.x = tmp5.x - tmp7.x;
                tmp5.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp5.x + tmp7.x;
                tmp4.w = tmp4.w - tmp5.x;
                tmp2.w = tmp2.w * tmp4.w + tmp5.x;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                if (tmp3.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogColor; // 0 (starting at cb5[0].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb6[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb6[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb6[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb6[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb6[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb6[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb6[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb6[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb7[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb7[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb7[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb7[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp4.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp4.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp4.w = tmp7.y * 0.25 + 0.75;
                    tmp5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp4.w, tmp5.x);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp4.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp5.x = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp5.x = min(tmp5.x, tmp7.x);
                tmp5.x = tmp5.x - tmp7.x;
                tmp5.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp5.x + tmp7.x;
                tmp4.w = tmp4.w - tmp5.x;
                tmp2.w = tmp2.w * tmp4.w + tmp5.x;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                if (tmp3.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb5[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb5[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb5[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb5[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb5[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb5[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb5[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4
            sampler2D _ShadowMapTexture; // 5
            sampler2D NGSS_FrustumShadowsTexture; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp4.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp4.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp4.w = tmp7.y * 0.25 + 0.75;
                    tmp5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp4.w, tmp5.x);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp4.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp5.x = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp5.x = min(tmp5.x, tmp7.x);
                tmp5.x = tmp5.x - tmp7.x;
                tmp5.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp5.x + tmp7.x;
                tmp4.w = tmp4.w - tmp5.x;
                tmp2.w = tmp2.w * tmp4.w + tmp5.x;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                if (tmp3.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogColor; // 0 (starting at cb3[0].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb4[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb4[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb4[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb4[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb4[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb4[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb4[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb4[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp3.www * _LightColor0.xyz;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogColor; // 0 (starting at cb5[0].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb6[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb6[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb6[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb6[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb6[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb6[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb6[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb6[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb7[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb7[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb7[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb7[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4
            sampler2D _ShadowMapTexture; // 5
            sampler2D NGSS_FrustumShadowsTexture; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp4.w = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp7.x);
                tmp4.w = tmp4.w - tmp7.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp7.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp2.x = 1.0 - tmp2.w;
                tmp1.w = saturate(tmp1.w + tmp2.x);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && LIGHTPROBE_SH && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb5[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb5[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb5[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb5[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb5[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb5[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb5[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp4.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp4.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp4.w = tmp7.y * 0.25 + 0.75;
                    tmp5.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp4.w, tmp5.x);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp4.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp5.x = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp5.x = min(tmp5.x, tmp7.x);
                tmp5.x = tmp5.x - tmp7.x;
                tmp5.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp5.x + tmp7.x;
                tmp4.w = tmp4.w - tmp5.x;
                tmp2.w = tmp2.w * tmp4.w + tmp5.x;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                if (tmp3.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && LIGHTPROBE_SH
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogColor; // 0 (starting at cb3[0].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb4[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb4[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb4[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb4[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb4[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb4[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb4[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb4[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp3.www * _LightColor0.xyz;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp2.x = 1.0 - tmp2.w;
                tmp1.w = saturate(tmp1.w + tmp2.x);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogColor; // 0 (starting at cb5[0].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb6[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb6[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb6[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb6[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb6[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb6[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb6[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb6[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb7[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb7[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb7[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb7[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp4.w = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp7.x);
                tmp4.w = tmp4.w - tmp7.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp7.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && LIGHTPROBE_SH
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb3[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb3[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb3[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb3[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb3[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb3[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb3[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp3.www * _LightColor0.xyz;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp2.x = 1.0 - tmp2.w;
                tmp1.w = saturate(tmp1.w + tmp2.x);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb5[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb5[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb5[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb5[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb5[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb5[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb5[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4
            sampler2D _ShadowMapTexture; // 5
            sampler2D NGSS_FrustumShadowsTexture; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp4.w = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp7.x);
                tmp4.w = tmp4.w - tmp7.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp7.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp2.x = 1.0 - tmp2.w;
                tmp1.w = saturate(tmp1.w + tmp2.x);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogColor; // 0 (starting at cb3[0].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb4[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb4[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb4[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb4[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb4[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb4[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb4[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb4[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && LIGHTPROBE_SH
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb3[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb3[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb3[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb3[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb3[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb3[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb3[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                float4 tmp15;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp4.x = dot(tmp7.xyz, tmp7.xyz);
                tmp4.x = rsqrt(tmp4.x);
                tmp4.xyz = tmp4.xxx * tmp7.xyz;
                tmp5.x = 1.0 - tmp1.w;
                tmp5.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp5.w = tmp5.w + tmp5.w;
                tmp7.xyz = tmp4.xyz * -tmp5.www + -tmp2.xyz;
                tmp8.xyz = tmp3.www * _LightColor0.xyz;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp9.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp9.xyz;
                    tmp9.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp9.xyz;
                    tmp9.xyz = tmp9.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp9.xyz = tmp2.www ? tmp9.xyz : tmp0.xyz;
                    tmp9.xyz = tmp9.xyz - unity_ProbeVolumeMin;
                    tmp9.yzw = tmp9.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp9.y * 0.25;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5;
                    tmp5.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp2.w = max(tmp2.w, tmp3.w);
                    tmp9.x = min(tmp5.w, tmp2.w);
                    tmp10 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xzw);
                    tmp11.xyz = tmp9.xzw + float3(0.25, 0.0, 0.0);
                    tmp11 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp11.xyz);
                    tmp9.xyz = tmp9.xzw + float3(0.5, 0.0, 0.0);
                    tmp9 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp9.xyz);
                    tmp4.w = 1.0;
                    tmp10.x = dot(tmp10, tmp4);
                    tmp10.y = dot(tmp11, tmp4);
                    tmp10.z = dot(tmp9, tmp4);
                } else {
                    tmp4.w = 1.0;
                    tmp10.x = dot(unity_SHAr, tmp4);
                    tmp10.y = dot(unity_SHAg, tmp4);
                    tmp10.z = dot(unity_SHAb, tmp4);
                }
                tmp9.xyz = tmp10.xyz + inp.texcoord5.xyz;
                tmp9.xyz = max(tmp9.xyz, float3(0.0, 0.0, 0.0));
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp10.xyz = tmp2.www * tmp7.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp10.xyz;
                    tmp12.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp12.xyz = tmp12.xyz / tmp10.xyz;
                    tmp13.xyz = tmp10.xyz > float3(0.0, 0.0, 0.0);
                    tmp11.xyz = tmp13.xyz ? tmp11.xyz : tmp12.xyz;
                    tmp2.w = min(tmp11.y, tmp11.x);
                    tmp2.w = min(tmp11.z, tmp2.w);
                    tmp11.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp10.xyz = tmp10.xyz * tmp2.www + tmp11.xyz;
                } else {
                    tmp10.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp5.x * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp5.x;
                tmp2.w = tmp2.w * 6.0;
                tmp10 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp10.xyz, tmp2.w));
                tmp3.w = tmp10.w - 1.0;
                tmp3.w = unity_SpecCube0_HDR.w * tmp3.w + 1.0;
                tmp3.w = log(tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.y;
                tmp3.w = pow(2.0, tmp3.w);
                tmp3.w = tmp3.w * unity_SpecCube0_HDR.x;
                tmp11.xyz = tmp10.xyz * tmp3.www;
                tmp4.w = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp4.w) {
                    tmp4.w = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp4.w) {
                        tmp4.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp4.w = rsqrt(tmp4.w);
                        tmp12.xyz = tmp4.www * tmp7.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp12.xyz;
                        tmp14.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp14.xyz = tmp14.xyz / tmp12.xyz;
                        tmp15.xyz = tmp12.xyz > float3(0.0, 0.0, 0.0);
                        tmp13.xyz = tmp15.xyz ? tmp13.xyz : tmp14.xyz;
                        tmp4.w = min(tmp13.y, tmp13.x);
                        tmp4.w = min(tmp13.z, tmp4.w);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp12.xyz * tmp4.www + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp3.www * tmp10.xyz + -tmp0.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp11.xyz;
                tmp7.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp7.xyz = tmp5.yyy * tmp7.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp5.xx);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp3.w = tmp2.z * tmp2.z;
                tmp3.w = tmp3.w * tmp3.w;
                tmp2.z = tmp2.z * tmp3.w;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp5.x * tmp5.x;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp7.xyz, tmp7.xyz);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp2.x = 1.0 - tmp2.w;
                tmp1.w = saturate(tmp1.w + tmp2.x);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp2.xyw = tmp9.xyz * tmp5.zzz + tmp2.xyw;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp5.xyz = float3(1.0, 1.0, 1.0) - tmp7.xyz;
                tmp5.xyz = tmp5.xyz * tmp0.www + tmp7.xyz;
                tmp4.xyz = tmp4.xyz * tmp5.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp7.xyz;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp7.xyz;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb5[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb5[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb5[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb5[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb5[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb5[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb5[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb5[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp1.xyz, tmp7.xyz);
                tmp7.xyz = tmp0.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp3.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp7.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp3.w, tmp4.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp5.xw = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp7 = tex2D(_ShadowMapTexture, tmp5.xw);
                tmp8 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xw);
                tmp4.w = saturate(tmp8.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp7.x);
                tmp4.w = tmp4.w - tmp7.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp7.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp2.x = 1.0 - tmp2.w;
                tmp1.w = saturate(tmp1.w + tmp2.x);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogColor; // 0 (starting at cb3[0].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb4[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb4[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb4[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb4[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb4[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb4[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb4[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb4[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                tmp0.xyz = tmp6.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord6.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.xyz = tmp0.xyz - unity_FogColor.xyz;
                o.sv_target.xyz = tmp0.www * tmp0.xyz + unity_FogColor.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float _ElectricShockIntensity; // 156 (starting at cb0[9].w)
            float4 _ElectricShockColor; // 160 (starting at cb0[10].x)
            float _ElectricShockSpeed; // 176 (starting at cb0[11].x)
            float _ElectricShockScale; // 180 (starting at cb0[11].y)
            float4 _ElectricShockTexture_ST; // 192 (starting at cb0[12].x)
            float _ElectricShockTexturePanSpeed; // 208 (starting at cb0[13].x)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float _Irradiated; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float4 _EmissiveColor; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb3[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb3[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb3[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb3[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb3[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb3[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb3[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp6.z = _ElectricShockSpeed * _Time.y;
                tmp7.xyz = tmp0.xyz * _ElectricShockScale.xxx;
                tmp6.xy = float2(0.0, 0.0);
                tmp8.xyz = tmp0.xyz * _ElectricShockScale.xxx + tmp6.yyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp1.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp8.z * 4.0;
                tmp3.w = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp10.x = sin(tmp1.w);
                tmp11.x = cos(tmp1.w);
                tmp11.y = tmp10.x;
                tmp1.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp9.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.w = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp3.w);
                tmp11.x = cos(tmp3.w);
                tmp11.y = tmp10.x;
                tmp3.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp2.w = tmp2.w * tmp4.w;
                tmp2.w = tmp4.w * 6.283185 + tmp2.w;
                tmp9.x = sin(tmp2.w);
                tmp10.x = cos(tmp2.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp2.w = dot(tmp10.xy, tmp8.xy);
                tmp2.w = tmp2.w - tmp3.w;
                tmp2.w = tmp9.z * tmp2.w + tmp3.w;
                tmp2.w = tmp2.w - tmp1.w;
                tmp1.w = tmp9.w * tmp2.w + tmp1.w;
                tmp8.xyz = tmp7.xyz * float3(2.0, 2.0, 2.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp2.w = tmp2.w * 0.7142857;
                tmp1.w = tmp1.w * 1.428571 + tmp2.w;
                tmp8.xyz = tmp7.xyz * float3(4.0, 4.0, 4.0) + tmp6.xyz;
                tmp9.xy = floor(tmp8.xy);
                tmp8.xy = tmp8.xy - tmp9.xy;
                tmp9.zw = tmp8.xy * tmp8.xy;
                tmp10.xy = -tmp8.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp9.zw = tmp9.zw * tmp10.xy;
                tmp2.w = dot(tmp9.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp8.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp10.x = sin(tmp2.w);
                tmp11.x = cos(tmp2.w);
                tmp11.y = tmp10.x;
                tmp2.w = dot(tmp11.xy, tmp8.xy);
                tmp10 = tmp9.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp10.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp12 = tmp8.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp9.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp10.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.w = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.w;
                tmp10.x = sin(tmp4.w);
                tmp11.x = cos(tmp4.w);
                tmp11.y = tmp10.x;
                tmp4.w = dot(tmp11.xy, tmp12.zw);
                tmp8.zw = tmp9.xy + float2(1.0, 1.0);
                tmp6.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.w = sin(tmp6.w);
                tmp6.w = tmp6.w * 43758.55;
                tmp6.w = frac(tmp6.w);
                tmp3.w = tmp3.w * tmp6.w;
                tmp3.w = tmp6.w * 6.283185 + tmp3.w;
                tmp9.x = sin(tmp3.w);
                tmp10.x = cos(tmp3.w);
                tmp8.xy = tmp8.xy - float2(1.0, 1.0);
                tmp10.y = tmp9.x;
                tmp3.w = dot(tmp10.xy, tmp8.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp9.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp9.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.3571429 + tmp1.w;
                tmp6.xyz = tmp7.xyz * float3(8.0, 8.0, 8.0) + tmp6.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp2.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.283185 + tmp4.w;
                tmp8.x = sin(tmp2.w);
                tmp9.x = cos(tmp2.w);
                tmp9.y = tmp8.x;
                tmp2.w = dot(tmp9.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp10 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.xy);
                tmp4.w = tmp4.w - tmp2.w;
                tmp2.w = tmp7.z * tmp4.w + tmp2.w;
                tmp4.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.w = sin(tmp4.w);
                tmp4.w = tmp4.w * 43758.55;
                tmp4.w = frac(tmp4.w);
                tmp6.z = tmp3.w * tmp4.w;
                tmp4.w = tmp4.w * 6.283185 + tmp6.z;
                tmp8.x = sin(tmp4.w);
                tmp9.x = cos(tmp4.w);
                tmp9.y = tmp8.x;
                tmp4.w = dot(tmp9.xy, tmp10.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp6.z = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp6.z = sin(tmp6.z);
                tmp6.z = tmp6.z * 43758.55;
                tmp6.z = frac(tmp6.z);
                tmp3.w = tmp3.w * tmp6.z;
                tmp3.w = tmp6.z * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.w;
                tmp3.w = tmp7.z * tmp3.w + tmp4.w;
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = tmp7.w * tmp3.w + tmp2.w;
                tmp1.w = tmp2.w * 0.1785714 + tmp1.w;
                tmp1.w = tmp1.w * 0.5;
                tmp6.xy = -abs(tmp1.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp6.x = saturate(tmp6.x);
                tmp1.w = tmp6.x * 0.1;
                tmp2.w = max(tmp6.y, 0.0);
                tmp1.w = max(tmp1.w, tmp2.w);
                tmp2.w = _Time.y * _ElectricShockSpeed + tmp1.w;
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 0.2 + 0.8;
                tmp6.xyz = tmp2.www * _ElectricShockColor.xyz;
                tmp7.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp8.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp8.y = 0.0;
                tmp7.xy = tmp7.xy + tmp8.xy;
                tmp7 = tex2D(_ElectricShockTexture, tmp7.xy);
                tmp6.xyz = tmp6.xyz * tmp7.xyz;
                tmp6.xyz = tmp1.www * tmp6.xyz;
                tmp6.xyz = tmp6.xyz * _ElectricShockIntensity.xxx;
                tmp1.w = _Irradiated != 0.0;
                tmp7.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp8.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp7.xyz = tmp1.www ? tmp7.xyz : tmp8.xyz;
                tmp6.xyz = tmp6.xyz * float3(20.0, 20.0, 20.0) + tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #else
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float _Irradiated; // 192 (starting at cb0[12].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float4 _EmissiveColor; // 224 (starting at cb0[14].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_SpecCube0_BoxMax; // 0 (starting at cb3[0].x)
            // float4 unity_SpecCube0_BoxMin; // 16 (starting at cb3[1].x)
            // float4 unity_SpecCube0_ProbePosition; // 32 (starting at cb3[2].x)
            // float4 unity_SpecCube0_HDR; // 48 (starting at cb3[3].x)
            // float4 unity_SpecCube1_BoxMax; // 64 (starting at cb3[4].x)
            // float4 unity_SpecCube1_BoxMin; // 80 (starting at cb3[5].x)
            // float4 unity_SpecCube1_ProbePosition; // 96 (starting at cb3[6].x)
            // float4 unity_SpecCube1_HDR; // 112 (starting at cb3[7].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                float4 tmp13;
                float4 tmp14;
                tmp0.x = inp.texcoord1.w;
                tmp0.y = inp.texcoord2.w;
                tmp0.z = inp.texcoord3.w;
                tmp1.xyz = _WorldSpaceCameraPos - tmp0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp1.xyz;
                tmp3.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = _Irradiated != 0.0;
                tmp6.xyz = tmp5.www * float3(0.2950229, 1.0, 0.0);
                tmp7.xyz = tmp5.www * _EmissiveColor.xyz;
                tmp6.xyz = tmp1.www ? tmp6.xyz : tmp7.xyz;
                tmp1.w = 1.0 - tmp5.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.www ? tmp7.xyz : tmp0.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp7.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp7.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp7.xyz, tmp7.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp7.xyz;
                tmp3.w = 1.0 - tmp1.w;
                tmp4.w = dot(-tmp2.xyz, tmp4.xyz);
                tmp4.w = tmp4.w + tmp4.w;
                tmp7.xyz = tmp4.xyz * -tmp4.www + -tmp2.xyz;
                tmp8.xyz = tmp2.www * _LightColor0.xyz;
                tmp2.w = unity_SpecCube0_ProbePosition.w > 0.0;
                if (tmp2.w) {
                    tmp2.w = dot(tmp7.xyz, tmp7.xyz);
                    tmp2.w = rsqrt(tmp2.w);
                    tmp9.xyz = tmp2.www * tmp7.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMax.xyz - tmp0.xyz;
                    tmp10.xyz = tmp10.xyz / tmp9.xyz;
                    tmp11.xyz = unity_SpecCube0_BoxMin.xyz - tmp0.xyz;
                    tmp11.xyz = tmp11.xyz / tmp9.xyz;
                    tmp12.xyz = tmp9.xyz > float3(0.0, 0.0, 0.0);
                    tmp10.xyz = tmp12.xyz ? tmp10.xyz : tmp11.xyz;
                    tmp2.w = min(tmp10.y, tmp10.x);
                    tmp2.w = min(tmp10.z, tmp2.w);
                    tmp10.xyz = tmp0.xyz - unity_SpecCube0_ProbePosition.xyz;
                    tmp9.xyz = tmp9.xyz * tmp2.www + tmp10.xyz;
                } else {
                    tmp9.xyz = tmp7.xyz;
                }
                tmp2.w = -tmp3.w * 0.7 + 1.7;
                tmp2.w = tmp2.w * tmp3.w;
                tmp2.w = tmp2.w * 6.0;
                tmp9 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp9.xyz, tmp2.w));
                tmp4.w = tmp9.w - 1.0;
                tmp4.w = unity_SpecCube0_HDR.w * tmp4.w + 1.0;
                tmp4.w = log(tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.y;
                tmp4.w = pow(2.0, tmp4.w);
                tmp4.w = tmp4.w * unity_SpecCube0_HDR.x;
                tmp10.xyz = tmp9.xyz * tmp4.www;
                tmp5.x = unity_SpecCube0_BoxMin.w < 0.99999;
                if (tmp5.x) {
                    tmp5.x = unity_SpecCube1_ProbePosition.w > 0.0;
                    if (tmp5.x) {
                        tmp5.x = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.x = rsqrt(tmp5.x);
                        tmp11.xyz = tmp5.xxx * tmp7.xyz;
                        tmp12.xyz = unity_SpecCube1_BoxMax.xyz - tmp0.xyz;
                        tmp12.xyz = tmp12.xyz / tmp11.xyz;
                        tmp13.xyz = unity_SpecCube1_BoxMin.xyz - tmp0.xyz;
                        tmp13.xyz = tmp13.xyz / tmp11.xyz;
                        tmp14.xyz = tmp11.xyz > float3(0.0, 0.0, 0.0);
                        tmp12.xyz = tmp14.xyz ? tmp12.xyz : tmp13.xyz;
                        tmp5.x = min(tmp12.y, tmp12.x);
                        tmp5.x = min(tmp12.z, tmp5.x);
                        tmp0.xyz = tmp0.xyz - unity_SpecCube1_ProbePosition.xyz;
                        tmp7.xyz = tmp11.xyz * tmp5.xxx + tmp0.xyz;
                    }
                    tmp7 = UNITY_SAMPLE_TEXCUBE_SAMPLER(unity_SpecCube0, unity_SpecCube0, float4(tmp7.xyz, tmp2.w));
                    tmp0.x = tmp7.w - 1.0;
                    tmp0.x = unity_SpecCube1_HDR.w * tmp0.x + 1.0;
                    tmp0.x = log(tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.y;
                    tmp0.x = pow(2.0, tmp0.x);
                    tmp0.x = tmp0.x * unity_SpecCube1_HDR.x;
                    tmp0.xyz = tmp7.xyz * tmp0.xxx;
                    tmp7.xyz = tmp4.www * tmp9.xyz + -tmp0.xyz;
                    tmp10.xyz = unity_SpecCube0_BoxMin.www * tmp7.xyz + tmp0.xyz;
                }
                tmp0.xyz = tmp5.zzz * tmp10.xyz;
                tmp5.xzw = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xzw = tmp5.yyy * tmp5.xzw + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.xyz = tmp1.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp1.xyz, tmp1.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, _WorldSpaceLightPos0.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp1.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp1.xyz));
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = dot(tmp1.yy, tmp3.ww);
                tmp1.y = tmp1.y - 0.5;
                tmp1.z = 1.0 - tmp2.x;
                tmp2.z = tmp1.z * tmp1.z;
                tmp2.z = tmp2.z * tmp2.z;
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp1.y * tmp1.z + 1.0;
                tmp2.z = 1.0 - abs(tmp0.w);
                tmp4.x = tmp2.z * tmp2.z;
                tmp4.x = tmp4.x * tmp4.x;
                tmp2.z = tmp2.z * tmp4.x;
                tmp1.y = tmp1.y * tmp2.z + 1.0;
                tmp1.y = tmp1.y * tmp1.z;
                tmp1.y = tmp2.x * tmp1.y;
                tmp1.z = tmp3.w * tmp3.w;
                tmp1.z = max(tmp1.z, 0.002);
                tmp3.w = 1.0 - tmp1.z;
                tmp4.x = abs(tmp0.w) * tmp3.w + tmp1.z;
                tmp3.w = tmp2.x * tmp3.w + tmp1.z;
                tmp0.w = abs(tmp0.w) * tmp3.w;
                tmp0.w = tmp2.x * tmp4.x + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp3.w = tmp1.z * tmp1.z;
                tmp4.x = tmp2.y * tmp3.w + -tmp2.y;
                tmp2.y = tmp4.x * tmp2.y + 1.0;
                tmp3.w = tmp3.w * 0.3183099;
                tmp2.y = tmp2.y * tmp2.y + 0.0000001;
                tmp2.y = tmp3.w / tmp2.y;
                tmp0.w = tmp0.w * tmp2.y;
                tmp0.w = tmp0.w * 3.141593;
                tmp0.w = tmp2.x * tmp0.w;
                tmp0.w = max(tmp0.w, 0.0);
                tmp1.z = tmp1.z * tmp1.z + 1.0;
                tmp1.z = 1.0 / tmp1.z;
                tmp2.x = dot(tmp5.xzw, tmp5.xzw);
                tmp2.x = tmp2.x != 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp0.w = tmp0.w * tmp2.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = saturate(tmp1.w + 1.0);
                tmp2.xyw = tmp1.yyy * tmp8.xyz;
                tmp4.xyz = tmp8.xyz * tmp0.www;
                tmp0.w = 1.0 - tmp1.x;
                tmp1.x = tmp0.w * tmp0.w;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0 = tmp0 * tmp1.zzzx;
                tmp7.xyz = float3(1.0, 1.0, 1.0) - tmp5.xzw;
                tmp7.xyz = tmp7.xyz * tmp0.www + tmp5.xzw;
                tmp4.xyz = tmp4.xyz * tmp7.xyz;
                tmp2.xyw = tmp3.xyz * tmp2.xyw + tmp4.xyz;
                tmp1.xyz = tmp1.www - tmp5.xzw;
                tmp1.xyz = tmp2.zzz * tmp1.xyz + tmp5.xzw;
                tmp0.xyz = tmp0.xyz * tmp1.xyz + tmp2.xyw;
                o.sv_target.xyz = tmp6.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }
            #endif
            ENDCG
            
        }
        Pass {
            Name "FORWARD"
            Blend One One, One One
            ZClip On
            ZWrite Off
            Tags {
                "IsEmissive"="true"
                "LIGHTMODE"="FORWARDADD"
                "QUEUE"="Geometry+0"
                "RenderType"="Opaque"
                "SHADOWSUPPORT"="true"
            }
            CGPROGRAM
            
            #pragma vertex vert
            #pragma fragment frag

            #pragma multi_compile POINT DIRECTIONAL SPOT POINT_COOKIE DIRECTIONAL_COOKIE
            #pragma shader_feature _ELECTRIC_SHOCK_ON
            #pragma shader_feature FOG_EXP
            #pragma shader_feature SHADOWS_DEPTH
            #pragma shader_feature SHADOWS_SOFT
            #pragma shader_feature SHADOWS_CUBE
            #pragma shader_feature SHADOWS_SCREEN
            

            #if _ELECTRIC_SHOCK_ON && FOG_EXP && SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 480 (starting at cb0[30].x)
            float4x4 unity_WorldToLight; // 224 (starting at cb0[14].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 224 (starting at cb0[14].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 480 (starting at cb0[30].x)
            float4x4 unity_WorldToLight; // 224 (starting at cb0[14].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && SHADOWS_DEPTH && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord8.x = tmp0.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.w = dot(tmp1.xyz, tmp1.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp1.xyz = tmp1.www * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp1.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp1.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp1.x = tmp0.y * _ProjectionParams.x;
                tmp2.xz = tmp0.xw * float2(0.5, 0.5);
                tmp2.w = tmp1.x * 0.5;
                tmp0.xy = tmp2.zz + tmp2.xw;
                o.texcoord5 = tmp0;
                o.texcoord7 = tmp0;
                o.color = v.color;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE && FOG_EXP && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float texcoord8 : TEXCOORD8;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord8.x = tmp1.z;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord5 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT_COOKIE && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 224 (starting at cb0[14].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && SHADOWS_DEPTH && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord8.x = tmp0.z;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.w = dot(tmp1.xyz, tmp1.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp1.xyz = tmp1.www * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp1.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp1.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp1.x = tmp0.y * _ProjectionParams.x;
                tmp2.xz = tmp0.xw * float2(0.5, 0.5);
                tmp2.w = tmp1.x * 0.5;
                tmp0.xy = tmp2.zz + tmp2.xw;
                o.texcoord5 = tmp0;
                o.texcoord7 = tmp0;
                o.color = v.color;
                return o;
            }

            #elif DIRECTIONAL_COOKIE && FOG_EXP && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float texcoord8 : TEXCOORD8;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord8.x = tmp1.z;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord5 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                return o;
            }

            #elif FOG_EXP && POINT && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && POINT_COOKIE && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SHADOWS_DEPTH && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.w = dot(tmp1.xyz, tmp1.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp1.xyz = tmp1.www * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp1.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp1.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp1.x = tmp0.y * _ProjectionParams.x;
                tmp1.w = tmp1.x * 0.5;
                tmp1.xz = tmp0.xw * float2(0.5, 0.5);
                tmp0.xy = tmp1.zz + tmp1.xw;
                o.texcoord5 = tmp0;
                o.texcoord7 = tmp0;
                o.color = v.color;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord5 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT_COOKIE && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord8.x = tmp0.z;
                o.texcoord5.zw = tmp0.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.z = dot(tmp1.xyz, tmp1.xyz);
                tmp0.z = rsqrt(tmp0.z);
                tmp1.xyz = tmp0.zzz * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.z = dot(tmp2.xyz, tmp2.xyz);
                tmp0.z = rsqrt(tmp0.z);
                tmp2.xyz = tmp0.zzz * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.zzz * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.y = tmp0.y * _ProjectionParams.x;
                tmp0.xz = tmp0.xw * float2(0.5, 0.5);
                tmp0.w = tmp0.y * 0.5;
                o.texcoord5.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT_COOKIE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE && FOG_EXP
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float texcoord8 : TEXCOORD8;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord8.x = tmp1.z;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif SHADOWS_DEPTH && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.w = dot(tmp1.xyz, tmp1.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp1.xyz = tmp1.www * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp1.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp1.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp1.x = tmp0.y * _ProjectionParams.x;
                tmp1.w = tmp1.x * 0.5;
                tmp1.xz = tmp0.xw * float2(0.5, 0.5);
                tmp0.xy = tmp1.zz + tmp1.xw;
                o.texcoord5 = tmp0;
                o.texcoord7 = tmp0;
                o.color = v.color;
                return o;
            }

            #elif DIRECTIONAL_COOKIE && SHADOWS_SCREEN
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.xy = tmp0.zz + tmp0.xw;
                o.texcoord5 = tmp1;
                o.texcoord7 = tmp1;
                o.color = v.color;
                return o;
            }

            #elif POINT && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif POINT_COOKIE && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && POINT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord8.x = tmp0.z;
                o.texcoord5.zw = tmp0.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.z = dot(tmp1.xyz, tmp1.xyz);
                tmp0.z = rsqrt(tmp0.z);
                tmp1.xyz = tmp0.zzz * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.z = dot(tmp2.xyz, tmp2.xyz);
                tmp0.z = rsqrt(tmp0.z);
                tmp2.xyz = tmp0.zzz * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.zzz * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.y = tmp0.y * _ProjectionParams.x;
                tmp0.xz = tmp0.xw * float2(0.5, 0.5);
                tmp0.w = tmp0.y * 0.5;
                o.texcoord5.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif FOG_EXP && POINT_COOKIE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float texcoord8 : TEXCOORD8;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord8.x = tmp1.z;
                o.texcoord5.zw = tmp1.zw;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.z = dot(tmp2.xyz, tmp2.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp2.xyz = tmp1.zzz * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp1.z = dot(tmp3.xyz, tmp3.xyz);
                tmp1.z = rsqrt(tmp1.z);
                tmp3.xyz = tmp1.zzz * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp1.z = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp1.zzz * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp1.xz = tmp1.xw * float2(0.5, 0.5);
                tmp1.w = tmp1.y * 0.5;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL_COOKIE && FOG_EXP
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float texcoord8 : TEXCOORD8;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord8.x = tmp1.z;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 336 (starting at cb0[21].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.w = dot(tmp1.xyz, tmp1.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp1.xyz = tmp1.www * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp1.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp1.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.y = tmp0.y * _ProjectionParams.x;
                tmp1.xzw = tmp0.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp0.zw;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT_COOKIE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 416 (starting at cb0[26].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif POINT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif DIRECTIONAL
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 272 (starting at cb0[17].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp0 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp0;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp0;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                o.position = tmp0;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp1.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp1.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp1.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp1.w = dot(tmp1.xyz, tmp1.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp1.xyz = tmp1.www * tmp1.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xyz = tmp1.xyz * tmp2.xyz;
                tmp3.xyz = tmp1.zxy * tmp2.yzx + -tmp3.xyz;
                tmp1.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp1.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp1.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp1.z;
                o.texcoord3.z = tmp1.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.y = tmp0.y * _ProjectionParams.x;
                tmp1.xzw = tmp0.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp0.zw;
                o.texcoord5.xy = tmp1.zz + tmp1.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif SPOT
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1 = tmp0.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp1 = unity_WorldToLight._m00_m10_m20_m30 * tmp0.xxxx + tmp1;
                tmp1 = unity_WorldToLight._m02_m12_m22_m32 * tmp0.zzzz + tmp1;
                o.texcoord6 = unity_WorldToLight._m03_m13_m23_m33 * tmp0.wwww + tmp1;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif POINT_COOKIE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float3 texcoord6 : TEXCOORD6;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp2.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp2.w = dot(tmp3.xyz, tmp3.xyz);
                tmp2.w = rsqrt(tmp2.w);
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp2.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp2.www * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                tmp1.y = tmp1.y * _ProjectionParams.x;
                tmp2.xzw = tmp1.xwy * float3(0.5, 0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp2.zz + tmp2.xw;
                o.color = v.color;
                tmp1.xyz = tmp0.yyy * unity_WorldToLight._m01_m11_m21;
                tmp1.xyz = unity_WorldToLight._m00_m10_m20 * tmp0.xxx + tmp1.xyz;
                tmp0.xyz = unity_WorldToLight._m02_m12_m22 * tmp0.zzz + tmp1.xyz;
                o.texcoord6.xyz = unity_WorldToLight._m03_m13_m23 * tmp0.www + tmp0.xyz;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #else
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float2 texcoord6 : TEXCOORD6;
                float3 texcoord1 : TEXCOORD1;
                float3 texcoord2 : TEXCOORD2;
                float3 texcoord3 : TEXCOORD3;
                float3 texcoord4 : TEXCOORD4;
                float4 texcoord5 : TEXCOORD5;
                float4 color : COLOR;
                float4 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 352 (starting at cb0[22].x)
            float4x4 unity_WorldToLight; // 160 (starting at cb0[10].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                tmp2 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp0;
                o.texcoord4.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp0.xy = tmp2.yy * unity_WorldToLight._m01_m11;
                tmp0.xy = unity_WorldToLight._m00_m10 * tmp2.xx + tmp0.xy;
                tmp0.xy = unity_WorldToLight._m02_m12 * tmp2.zz + tmp0.xy;
                o.texcoord6.xy = unity_WorldToLight._m03_m13 * tmp2.ww + tmp0.xy;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp3.xyz = tmp0.xyz * tmp2.xyz;
                tmp3.xyz = tmp0.zxy * tmp2.yzx + -tmp3.xyz;
                tmp0.w = v.tangent.w * unity_WorldTransformParams.w;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                o.texcoord1.y = tmp3.x;
                o.texcoord1.x = tmp2.z;
                o.texcoord1.z = tmp0.y;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.z = tmp0.z;
                o.texcoord3.z = tmp0.x;
                o.texcoord2.y = tmp3.y;
                o.texcoord3.y = tmp3.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord5.zw = tmp1.zw;
                o.texcoord5.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord7 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }
            #endif


            #if _ELECTRIC_SHOCK_ON && FOG_EXP && SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 472 (starting at cb0[29].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 368 (starting at cb0[23].x)
            float4 _Albedo_ST; // 384 (starting at cb0[24].x)
            float4 _RMOE_ST; // 416 (starting at cb0[26].x)
            float _FirstPerson; // 468 (starting at cb0[29].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                    tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                    tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                    tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp2.z) {
                        tmp9.xyz = tmp8.xyz / tmp8.www;
                        tmp3.w = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                    }
                    if (!(tmp2.z)) {
                        tmp8.xyz = tmp8.xyz / tmp8.www;
                        tmp9.xy = tmp6.zx * _ScreenParams.yx;
                        tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                        tmp10 = tmp10 >= -tmp10.yyww;
                        tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp9.xy = tmp9.xy * tmp10.yw;
                        tmp9.xy = frac(tmp9.xy);
                        tmp9.xy = tmp9.xy * tmp10.xz;
                        tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                        tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                        tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                        tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                        tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                        tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                        tmp6.xz = tmp6.xz * _ScreenParams.xy;
                        tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                        tmp2.z = tmp2.z - tmp9.x;
                        tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                        tmp2.z = tmp2.z * 12.56637;
                        tmp4.w = max(tmp1.w, 1.0);
                        tmp2.z = tmp2.z / tmp4.w;
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp6.x = asint(tmp5.w);
                        tmp6.z = tmp8.z * 2.0 + -0.05;
                        tmp6.z = tmp6.z * 0.5 + 0.05;
                        tmp4.w = tmp4.w * tmp6.z;
                        tmp5.w = trunc(tmp5.w);
                        tmp6.z = sqrt(tmp5.w);
                        tmp9.xy = float2(0.0, 0.0);
                        tmp6.w = 0.0;
                        for (int i = tmp6.w; i < tmp6.x; i += 1) {
                            tmp8.w = floor(i);
                            tmp9.z = tmp8.w + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.z;
                            tmp8.w = tmp8.w * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp8.w);
                            tmp11.x = cos(tmp8.w);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.zw = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp10 = tex2Dlod(2, float4(tmp9.zw, 0, 0.0));
                            tmp8.w = tmp10.x >= tmp8.z;
                            tmp8.w = uint1(tmp8.w) & uint1(1);
                            tmp9.x = tmp8.w + tmp9.x;
                            tmp9.y = tmp10.x * tmp8.w + tmp9.y;
                        }
                        tmp6.x = tmp9.x == 0.0;
                        tmp5.w = tmp5.w == tmp9.x;
                        tmp6.z = uint1(tmp5.w) | uint1(tmp6.x);
                        if (!(tmp6.z)) {
                            tmp6.z = tmp9.y / tmp9.x;
                            tmp6.w = tmp8.z - tmp6.z;
                            tmp6.z = tmp6.w / tmp6.z;
                            tmp6.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp6.z = tmp6.z * tmp6.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp4.w = tmp4.w * tmp6.z;
                            tmp6.z = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp6.z;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp6.z = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp6.w = sqrt(tmp1.w);
                            tmp8.w = 0.0;
                            tmp9.x = 0.0;
                            for (int j = tmp9.x; j < tmp6.z; j += 1) {
                                tmp9.y = floor(j);
                                tmp9.z = tmp9.y + 0.5;
                                tmp9.z = sqrt(tmp9.z);
                                tmp9.z = tmp9.z / tmp6.w;
                                tmp9.y = tmp9.y * 2.4 + tmp2.z;
                                tmp10.x = sin(tmp9.y);
                                tmp11.x = cos(tmp9.y);
                                tmp11.x = tmp9.z * tmp11.x;
                                tmp11.y = tmp9.z * tmp10.x;
                                tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                                tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                                tmp8.w = tmp8.w + tmp9.y;
                            }
                            tmp1.w = tmp8.w / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp3.w;
                            tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp3.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xz = tmp7.xz * float2(0.5, 0.5);
                    tmp2.z = tmp7.y * _ProjectionParams.x;
                    tmp8.w = tmp2.z * 0.5;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xz = tmp7.xz * float2(0.5, 0.5);
                    tmp2.z = tmp7.y * _ProjectionParams.x;
                    tmp8.w = tmp2.z * 0.5;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                    tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                    tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                    tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp2.z) {
                        tmp9.xyz = tmp8.xyz / tmp8.www;
                        tmp3.w = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                    }
                    if (!(tmp2.z)) {
                        tmp8.xyz = tmp8.xyz / tmp8.www;
                        tmp9.xy = tmp6.zx * _ScreenParams.yx;
                        tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                        tmp10 = tmp10 >= -tmp10.yyww;
                        tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp9.xy = tmp9.xy * tmp10.yw;
                        tmp9.xy = frac(tmp9.xy);
                        tmp9.xy = tmp9.xy * tmp10.xz;
                        tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                        tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                        tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                        tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                        tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                        tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                        tmp6.xz = tmp6.xz * _ScreenParams.xy;
                        tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                        tmp2.z = tmp2.z - tmp9.x;
                        tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                        tmp2.z = tmp2.z * 12.56637;
                        tmp4.w = max(tmp1.w, 1.0);
                        tmp2.z = tmp2.z / tmp4.w;
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp6.x = asint(tmp5.w);
                        tmp6.z = tmp8.z * 2.0 + -0.05;
                        tmp6.z = tmp6.z * 0.5 + 0.05;
                        tmp4.w = tmp4.w * tmp6.z;
                        tmp5.w = trunc(tmp5.w);
                        tmp6.z = sqrt(tmp5.w);
                        tmp9.xy = float2(0.0, 0.0);
                        tmp6.w = 0.0;
                        for (int i = tmp6.w; i < tmp6.x; i += 1) {
                            tmp8.w = floor(i);
                            tmp9.z = tmp8.w + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.z;
                            tmp8.w = tmp8.w * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp8.w);
                            tmp11.x = cos(tmp8.w);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.zw = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp10 = tex2Dlod(2, float4(tmp9.zw, 0, 0.0));
                            tmp8.w = tmp10.x >= tmp8.z;
                            tmp8.w = uint1(tmp8.w) & uint1(1);
                            tmp9.x = tmp8.w + tmp9.x;
                            tmp9.y = tmp10.x * tmp8.w + tmp9.y;
                        }
                        tmp6.x = tmp9.x == 0.0;
                        tmp5.w = tmp5.w == tmp9.x;
                        tmp6.z = uint1(tmp5.w) | uint1(tmp6.x);
                        if (!(tmp6.z)) {
                            tmp6.z = tmp9.y / tmp9.x;
                            tmp6.w = tmp8.z - tmp6.z;
                            tmp6.z = tmp6.w / tmp6.z;
                            tmp6.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp6.z = tmp6.z * tmp6.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp4.w = tmp4.w * tmp6.z;
                            tmp6.z = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp6.z;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp6.z = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp6.w = sqrt(tmp1.w);
                            tmp8.w = 0.0;
                            tmp9.x = 0.0;
                            for (int j = tmp9.x; j < tmp6.z; j += 1) {
                                tmp9.y = floor(j);
                                tmp9.z = tmp9.y + 0.5;
                                tmp9.z = sqrt(tmp9.z);
                                tmp9.z = tmp9.z / tmp6.w;
                                tmp9.y = tmp9.y * 2.4 + tmp2.z;
                                tmp10.x = sin(tmp9.y);
                                tmp11.x = cos(tmp9.y);
                                tmp11.x = tmp9.z * tmp11.x;
                                tmp11.y = tmp9.z * tmp10.x;
                                tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                                tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                                tmp8.w = tmp8.w + tmp9.y;
                            }
                            tmp1.w = tmp8.w / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp3.w;
                            tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp3.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x + tmp0.x;
                tmp0.y = tmp0.x * tmp0.y;
                tmp0.y = tmp0.y * tmp1.w + -0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xz = tmp7.xz * float2(0.5, 0.5);
                    tmp2.z = tmp7.y * _ProjectionParams.x;
                    tmp8.w = tmp2.z * 0.5;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xz = tmp7.xz * float2(0.5, 0.5);
                    tmp2.z = tmp7.y * _ProjectionParams.x;
                    tmp8.w = tmp2.z * 0.5;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 472 (starting at cb0[29].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 368 (starting at cb0[23].x)
            float4 _Albedo_ST; // 384 (starting at cb0[24].x)
            float4 _RMOE_ST; // 416 (starting at cb0[26].x)
            float _FirstPerson; // 468 (starting at cb0[29].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                    tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                    tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                    tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xyz = tmp6.xzw * float3(0.5, 0.5, 0.5);
                    tmp9.w = tmp9.y * _ProjectionParams.x;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp2.z) {
                        tmp9.xyz = tmp8.xyz / tmp8.www;
                        tmp3.w = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                    }
                    if (!(tmp2.z)) {
                        tmp8.xyz = tmp8.xyz / tmp8.www;
                        tmp9.xy = tmp6.zx * _ScreenParams.yx;
                        tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                        tmp10 = tmp10 >= -tmp10.yyww;
                        tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp9.xy = tmp9.xy * tmp10.yw;
                        tmp9.xy = frac(tmp9.xy);
                        tmp9.xy = tmp9.xy * tmp10.xz;
                        tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                        tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                        tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                        tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                        tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                        tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                        tmp6.xz = tmp6.xz * _ScreenParams.xy;
                        tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                        tmp2.z = tmp2.z - tmp9.x;
                        tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                        tmp2.z = tmp2.z * 12.56637;
                        tmp4.w = max(tmp1.w, 1.0);
                        tmp2.z = tmp2.z / tmp4.w;
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp6.x = asint(tmp5.w);
                        tmp6.z = tmp8.z * 2.0 + -0.05;
                        tmp6.z = tmp6.z * 0.5 + 0.05;
                        tmp4.w = tmp4.w * tmp6.z;
                        tmp5.w = trunc(tmp5.w);
                        tmp6.z = sqrt(tmp5.w);
                        tmp9.xy = float2(0.0, 0.0);
                        tmp6.w = 0.0;
                        for (int i = tmp6.w; i < tmp6.x; i += 1) {
                            tmp8.w = floor(i);
                            tmp9.z = tmp8.w + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.z;
                            tmp8.w = tmp8.w * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp8.w);
                            tmp11.x = cos(tmp8.w);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.zw = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp10 = tex2Dlod(2, float4(tmp9.zw, 0, 0.0));
                            tmp8.w = tmp10.x >= tmp8.z;
                            tmp8.w = uint1(tmp8.w) & uint1(1);
                            tmp9.x = tmp8.w + tmp9.x;
                            tmp9.y = tmp10.x * tmp8.w + tmp9.y;
                        }
                        tmp6.x = tmp9.x == 0.0;
                        tmp5.w = tmp5.w == tmp9.x;
                        tmp6.z = uint1(tmp5.w) | uint1(tmp6.x);
                        if (!(tmp6.z)) {
                            tmp6.z = tmp9.y / tmp9.x;
                            tmp6.w = tmp8.z - tmp6.z;
                            tmp6.z = tmp6.w / tmp6.z;
                            tmp6.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp6.z = tmp6.z * tmp6.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp4.w = tmp4.w * tmp6.z;
                            tmp6.z = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp6.z;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp6.z = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp6.w = sqrt(tmp1.w);
                            tmp8.w = 0.0;
                            tmp9.x = 0.0;
                            for (int j = tmp9.x; j < tmp6.z; j += 1) {
                                tmp9.y = floor(j);
                                tmp9.z = tmp9.y + 0.5;
                                tmp9.z = sqrt(tmp9.z);
                                tmp9.z = tmp9.z / tmp6.w;
                                tmp9.y = tmp9.y * 2.4 + tmp2.z;
                                tmp10.x = sin(tmp9.y);
                                tmp11.x = cos(tmp9.y);
                                tmp11.x = tmp9.z * tmp11.x;
                                tmp11.y = tmp9.z * tmp10.x;
                                tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                                tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                                tmp8.w = tmp8.w + tmp9.y;
                            }
                            tmp1.w = tmp8.w / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp3.w;
                            tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp3.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xyz = tmp7.xyz * float3(0.5, 0.5, 0.5);
                    tmp8.w = tmp8.y * _ProjectionParams.x;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xyz = tmp7.xyz * float3(0.5, 0.5, 0.5);
                    tmp8.w = tmp8.y * _ProjectionParams.x;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && SHADOWS_DEPTH && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp6.xzw = tmp8.xyz / tmp8.www;
                    tmp3.w = tex2D(_ShadowMapTexture, tmp6.xz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp8.xyz = tmp8.xyz / tmp8.www;
                    tmp9.xy = tmp6.zx * _ScreenParams.yx;
                    tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                    tmp10 = tmp10 >= -tmp10.yyww;
                    tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp9.xy = tmp9.xy * tmp10.yw;
                    tmp9.xy = frac(tmp9.xy);
                    tmp9.xy = tmp9.xy * tmp10.xz;
                    tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                    tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                    tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                    tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                    tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                    tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                    tmp6.xz = tmp6.xz * _ScreenParams.xy;
                    tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                    tmp2.z = tmp2.z - tmp9.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp5.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp5.w = tmp1.w * tmp5.w;
                    tmp5.w = max(tmp5.w, 4.0);
                    tmp5.w = min(tmp5.w, 64.0);
                    tmp6.x = asint(tmp5.w);
                    tmp4.w = tmp4.w * 0.0175;
                    tmp5.w = trunc(tmp5.w);
                    tmp6.z = sqrt(tmp5.w);
                    tmp6.w = 0.0;
                    tmp8.w = 0.0;
                    for (int i = tmp8.w; i < tmp6.x; i += 1) {
                        tmp9.x = floor(i);
                        tmp9.y = tmp9.x + 0.5;
                        tmp9.y = sqrt(tmp9.y);
                        tmp9.y = tmp9.y / tmp6.z;
                        tmp9.x = tmp9.x * 2.4 + tmp2.z;
                        tmp9.x = sin(tmp9.x);
                        tmp10.x = cos(tmp9.x);
                        tmp10.x = tmp9.y * tmp10.x;
                        tmp10.y = tmp9.x * tmp9.y;
                        tmp9.xy = tmp10.xy * tmp4.ww + tmp8.xy;
                        tmp9.x = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp6.w = tmp6.w + tmp9.x;
                    }
                    tmp5.w = tmp6.w / tmp5.w;
                    tmp6.xz = tmp5.ww == float2(1.0, 0.0);
                    tmp5.w = uint1(tmp6.z) | uint1(tmp6.x);
                    if (!(tmp5.w)) {
                        tmp5.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp5.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp5.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp6.w = sqrt(tmp1.w);
                        tmp8.w = 0.0;
                        tmp9.x = 0.0;
                        for (int j = tmp9.x; j < tmp5.w; j += 1) {
                            tmp9.y = floor(j);
                            tmp9.z = tmp9.y + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.w;
                            tmp9.y = tmp9.y * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp9.y);
                            tmp11.x = cos(tmp9.y);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                            tmp8.w = tmp8.w + tmp9.y;
                        }
                        tmp1.w = tmp8.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp6.z ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp4.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp4.xzw, tmp4.xzw);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp3.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.x);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp4.xz = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp5 = tex2D(_ShadowMapTexture, tmp4.xz);
                tmp6 = tex2D(NGSS_FrustumShadowsTexture, tmp4.xz);
                tmp4.x = saturate(tmp6.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.x = min(tmp4.x, tmp5.x);
                tmp4.x = tmp4.x - tmp5.x;
                tmp4.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.x + tmp5.x;
                tmp3.w = tmp3.w - tmp4.x;
                tmp2.w = tmp2.w * tmp3.w + tmp4.x;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE && FOG_EXP && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5
            sampler2D _LightTexture0; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp5.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp5.xyz, tmp5.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp3.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.xy = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp6 = tex2D(_ShadowMapTexture, tmp5.xy);
                tmp5 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xy);
                tmp4.w = saturate(tmp5.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp6.x);
                tmp4.w = tmp4.w - tmp6.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp6.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT_COOKIE && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif SHADOWS_DEPTH && SHADOWS_SOFT && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                    tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                    tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                    tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp2.z) {
                        tmp9.xyz = tmp8.xyz / tmp8.www;
                        tmp3.w = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                    }
                    if (!(tmp2.z)) {
                        tmp8.xyz = tmp8.xyz / tmp8.www;
                        tmp9.xy = tmp6.zx * _ScreenParams.yx;
                        tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                        tmp10 = tmp10 >= -tmp10.yyww;
                        tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp9.xy = tmp9.xy * tmp10.yw;
                        tmp9.xy = frac(tmp9.xy);
                        tmp9.xy = tmp9.xy * tmp10.xz;
                        tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                        tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                        tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                        tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                        tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                        tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                        tmp6.xz = tmp6.xz * _ScreenParams.xy;
                        tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                        tmp2.z = tmp2.z - tmp9.x;
                        tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                        tmp2.z = tmp2.z * 12.56637;
                        tmp4.w = max(tmp1.w, 1.0);
                        tmp2.z = tmp2.z / tmp4.w;
                        tmp4.w = 1.0 - _LightShadowData.x;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp6.x = asint(tmp5.w);
                        tmp6.z = tmp8.z * 2.0 + -0.05;
                        tmp6.z = tmp6.z * 0.5 + 0.05;
                        tmp4.w = tmp4.w * tmp6.z;
                        tmp5.w = trunc(tmp5.w);
                        tmp6.z = sqrt(tmp5.w);
                        tmp9.xy = float2(0.0, 0.0);
                        tmp6.w = 0.0;
                        for (int i = tmp6.w; i < tmp6.x; i += 1) {
                            tmp8.w = floor(i);
                            tmp9.z = tmp8.w + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.z;
                            tmp8.w = tmp8.w * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp8.w);
                            tmp11.x = cos(tmp8.w);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.zw = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp10 = tex2Dlod(2, float4(tmp9.zw, 0, 0.0));
                            tmp8.w = tmp10.x >= tmp8.z;
                            tmp8.w = uint1(tmp8.w) & uint1(1);
                            tmp9.x = tmp8.w + tmp9.x;
                            tmp9.y = tmp10.x * tmp8.w + tmp9.y;
                        }
                        tmp6.x = tmp9.x == 0.0;
                        tmp5.w = tmp5.w == tmp9.x;
                        tmp6.z = uint1(tmp5.w) | uint1(tmp6.x);
                        if (!(tmp6.z)) {
                            tmp6.z = tmp9.y / tmp9.x;
                            tmp6.w = tmp8.z - tmp6.z;
                            tmp6.z = tmp6.w / tmp6.z;
                            tmp6.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp6.z = tmp6.z * tmp6.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp4.w = tmp4.w * tmp6.z;
                            tmp6.z = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp6.z;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp6.z = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp6.w = sqrt(tmp1.w);
                            tmp8.w = 0.0;
                            tmp9.x = 0.0;
                            for (int j = tmp9.x; j < tmp6.z; j += 1) {
                                tmp9.y = floor(j);
                                tmp9.z = tmp9.y + 0.5;
                                tmp9.z = sqrt(tmp9.z);
                                tmp9.z = tmp9.z / tmp6.w;
                                tmp9.y = tmp9.y * 2.4 + tmp2.z;
                                tmp10.x = sin(tmp9.y);
                                tmp11.x = cos(tmp9.y);
                                tmp11.x = tmp9.z * tmp11.x;
                                tmp11.y = tmp9.z * tmp10.x;
                                tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                                tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                                tmp8.w = tmp8.w + tmp9.y;
                            }
                            tmp1.w = tmp8.w / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp3.w;
                            tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp3.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x + tmp0.x;
                tmp0.y = tmp0.x * tmp0.y;
                tmp0.y = tmp0.y * tmp1.w + -0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif POINT && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xz = tmp7.xz * float2(0.5, 0.5);
                    tmp2.z = tmp7.y * _ProjectionParams.x;
                    tmp8.w = tmp2.z * 0.5;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif POINT_COOKIE && SHADOWS_CUBE && SHADOWS_SOFT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_PCSS_FILTER_LOCAL_MIN; // 88 (starting at cb0[5].z)
            float NGSS_PCSS_FILTER_LOCAL_MAX; // 92 (starting at cb0[5].w)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp2.z = tmp2.x < 0.99;
                if (tmp2.z) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp7.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp7.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp8.xz = tmp7.xz * float2(0.5, 0.5);
                    tmp2.z = tmp7.y * _ProjectionParams.x;
                    tmp8.w = tmp2.z * 0.5;
                    tmp7.xy = tmp8.zz + tmp8.xw;
                    tmp8.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                    tmp7.xy = tmp7.xy / tmp7.zz;
                    tmp2.z = max(abs(tmp8.y), abs(tmp8.x));
                    tmp2.z = max(abs(tmp8.z), tmp2.z);
                    tmp2.z = tmp2.z - _LightProjectionParams.z;
                    tmp2.z = max(tmp2.z, 0.0);
                    tmp2.z = _LightProjectionParams.y / tmp2.z;
                    tmp2.z = tmp2.z - _LightProjectionParams.x;
                    tmp2.z = 1.0 - tmp2.z;
                    tmp3.w = NGSS_FORCE_HARD_SHADOWS > 0.0;
                    if (tmp3.w) {
                        tmp4.w = texCUBE(_ShadowMapTexture, tmp8.xyz);
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp4.w = tmp4.w * tmp5.w + _LightShadowData.x;
                    }
                    if (!(tmp3.w)) {
                        tmp7.zw = tmp7.yx * _ScreenParams.yx;
                        tmp9 = tmp7.zzww * float4(4.0, 4.0, 4.0, 4.0);
                        tmp9 = tmp9 >= -tmp9.yyww;
                        tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                        tmp7.zw = tmp7.zw * tmp9.yw;
                        tmp7.zw = frac(tmp7.zw);
                        tmp7.zw = tmp7.zw * tmp9.xz;
                        tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp7.w + 0].yzw);
                        tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp7.w + 0]);
                        tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp7.w + 0]);
                        tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp7.w + 0]);
                        tmp3.w = dot(tmp9, icb[tmp7.z + 0]);
                        tmp7.xy = tmp7.xy * _BlueNoiseTexture_TexelSize.xy;
                        tmp7.xy = tmp7.xy * _ScreenParams.xy;
                        tmp7 = tex2D(_BlueNoiseTexture, tmp7.xy);
                        tmp3.w = tmp3.w - tmp7.x;
                        tmp3.w = NGSS_NOISE_TO_DITHERING_SCALE * tmp3.w + tmp7.x;
                        tmp3.w = tmp3.w * 12.56637;
                        tmp5.w = max(tmp1.w, 1.0);
                        tmp3.w = tmp3.w / tmp5.w;
                        tmp7.xyz = tmp8.xyz * tmp8.zxy;
                        tmp7.xyz = tmp8.yzx * tmp8.yzx + -tmp7.xyz;
                        tmp5.w = dot(tmp7.xyz, tmp7.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp7.yzx * tmp8.zxy;
                        tmp9.xyz = tmp8.yzx * tmp7.zxy + -tmp9.xyz;
                        tmp5.w = dot(tmp9.xyz, tmp9.xyz);
                        tmp5.w = rsqrt(tmp5.w);
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = 1.0 - _LightShadowData.x;
                        tmp5.w = tmp5.w * 0.25;
                        tmp7.xyz = tmp5.www * tmp7.xyz;
                        tmp9.xyz = tmp5.www * tmp9.xyz;
                        tmp5.w = floor(NGSS_TEST_SAMPLERS);
                        tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                        tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                        tmp1.w = 1.0 - tmp1.w;
                        tmp5.w = tmp1.w * tmp5.w;
                        tmp5.w = max(tmp5.w, 4.0);
                        tmp5.w = min(tmp5.w, 64.0);
                        tmp7.w = asint(tmp5.w);
                        tmp5.w = trunc(tmp5.w);
                        tmp8.w = sqrt(tmp5.w);
                        tmp10.xy = float2(0.0, 0.0);
                        tmp9.w = 0.0;
                        for (int i = tmp9.w; i < tmp7.w; i += 1) {
                            tmp10.z = floor(i);
                            tmp10.w = tmp10.z + 0.5;
                            tmp10.w = sqrt(tmp10.w);
                            tmp10.w = tmp10.w / tmp8.w;
                            tmp10.z = tmp10.z * 2.4 + tmp3.w;
                            tmp11.x = sin(tmp10.z);
                            tmp12.x = cos(tmp10.z);
                            tmp10.z = tmp10.w * tmp12.x;
                            tmp10.w = tmp10.w * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.www;
                            tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                            tmp11.xyz = tmp8.xyz + tmp11.xyz;
                            tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                            tmp10.z = max(abs(tmp11.z), tmp10.z);
                            tmp10.z = tmp10.z - _LightProjectionParams.z;
                            tmp10.z = max(tmp10.z, 0.0);
                            tmp10.z = _LightProjectionParams.y / tmp10.z;
                            tmp10.z = tmp10.z - _LightProjectionParams.x;
                            tmp10.z = 1.0 - tmp10.z;
                            tmp11 = tex2Dlod(2, float4(tmp11.xyz, 0.0));
                            tmp10.z = tmp10.z < tmp11.x;
                            tmp10.z = uint1(tmp10.z) & uint1(1);
                            tmp10.x = tmp10.z + tmp10.x;
                            tmp10.y = tmp11.x * tmp10.z + tmp10.y;
                        }
                        tmp7.w = tmp10.x == 0.0;
                        tmp5.w = tmp5.w == tmp10.x;
                        tmp8.w = uint1(tmp5.w) | uint1(tmp7.w);
                        if (!(tmp8.w)) {
                            tmp8.w = tmp10.y / tmp10.x;
                            tmp2.z = tmp2.z - tmp8.w;
                            tmp2.z = tmp2.z / tmp8.w;
                            tmp8.w = NGSS_PCSS_FILTER_LOCAL_MIN + NGSS_PCSS_FILTER_LOCAL_MAX;
                            tmp2.z = tmp2.z * tmp8.w + -NGSS_PCSS_FILTER_LOCAL_MIN;
                            tmp8.w = floor(NGSS_FILTER_SAMPLERS);
                            tmp1.w = tmp1.w * tmp8.w;
                            tmp1.w = max(tmp1.w, 4.0);
                            tmp1.w = min(tmp1.w, 64.0);
                            tmp8.w = asint(tmp1.w);
                            tmp1.w = trunc(tmp1.w);
                            tmp9.w = sqrt(tmp1.w);
                            tmp10.xy = float2(0.0, 0.0);
                            for (int j = tmp10.y; j < tmp8.w; j += 1) {
                                tmp10.z = floor(j);
                                tmp10.w = tmp10.z + 0.5;
                                tmp10.w = sqrt(tmp10.w);
                                tmp10.w = tmp10.w / tmp9.w;
                                tmp10.z = tmp10.z * 2.4 + tmp3.w;
                                tmp11.x = sin(tmp10.z);
                                tmp12.x = cos(tmp10.z);
                                tmp10.z = tmp10.w * tmp12.x;
                                tmp10.w = tmp10.w * tmp11.x;
                                tmp11.xyz = tmp9.xyz * tmp10.www;
                                tmp11.xyz = tmp7.xyz * tmp10.zzz + tmp11.xyz;
                                tmp11.xyz = tmp11.xyz * tmp2.zzz + tmp8.xyz;
                                tmp10.z = max(abs(tmp11.y), abs(tmp11.x));
                                tmp10.z = max(abs(tmp11.z), tmp10.z);
                                tmp10.z = tmp10.z - _LightProjectionParams.z;
                                tmp10.z = max(tmp10.z, 0.0);
                                tmp10.z = _LightProjectionParams.y / tmp10.z;
                                tmp10.z = tmp10.z - _LightProjectionParams.x;
                                tmp10.z = 1.0 - tmp10.z;
                                tmp10.z = texCUBE(_ShadowMapTexture, tmp11.xyz);
                                tmp10.x = tmp10.z + tmp10.x;
                            }
                            tmp1.w = tmp10.x / tmp1.w;
                            tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                            tmp4.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                        } else {
                            tmp1.w = tmp5.w ? NGSS_GLOBAL_OPACITY : tmp4.w;
                            tmp4.w = tmp7.w ? 1.0 : tmp1.w;
                        }
                    }
                } else {
                    tmp4.w = 1.0;
                }
                tmp1.w = tmp2.y - tmp4.w;
                tmp1.w = tmp2.x * tmp1.w + tmp4.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && SHADOWS_DEPTH && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp6.xzw = tmp8.xyz / tmp8.www;
                    tmp3.w = tex2D(_ShadowMapTexture, tmp6.xz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp8.xyz = tmp8.xyz / tmp8.www;
                    tmp9.xy = tmp6.zx * _ScreenParams.yx;
                    tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                    tmp10 = tmp10 >= -tmp10.yyww;
                    tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp9.xy = tmp9.xy * tmp10.yw;
                    tmp9.xy = frac(tmp9.xy);
                    tmp9.xy = tmp9.xy * tmp10.xz;
                    tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                    tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                    tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                    tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                    tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                    tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                    tmp6.xz = tmp6.xz * _ScreenParams.xy;
                    tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                    tmp2.z = tmp2.z - tmp9.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp5.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp5.w = tmp1.w * tmp5.w;
                    tmp5.w = max(tmp5.w, 4.0);
                    tmp5.w = min(tmp5.w, 64.0);
                    tmp6.x = asint(tmp5.w);
                    tmp4.w = tmp4.w * 0.0175;
                    tmp5.w = trunc(tmp5.w);
                    tmp6.z = sqrt(tmp5.w);
                    tmp6.w = 0.0;
                    tmp8.w = 0.0;
                    for (int i = tmp8.w; i < tmp6.x; i += 1) {
                        tmp9.x = floor(i);
                        tmp9.y = tmp9.x + 0.5;
                        tmp9.y = sqrt(tmp9.y);
                        tmp9.y = tmp9.y / tmp6.z;
                        tmp9.x = tmp9.x * 2.4 + tmp2.z;
                        tmp9.x = sin(tmp9.x);
                        tmp10.x = cos(tmp9.x);
                        tmp10.x = tmp9.y * tmp10.x;
                        tmp10.y = tmp9.x * tmp9.y;
                        tmp9.xy = tmp10.xy * tmp4.ww + tmp8.xy;
                        tmp9.x = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp6.w = tmp6.w + tmp9.x;
                    }
                    tmp5.w = tmp6.w / tmp5.w;
                    tmp6.xz = tmp5.ww == float2(1.0, 0.0);
                    tmp5.w = uint1(tmp6.z) | uint1(tmp6.x);
                    if (!(tmp5.w)) {
                        tmp5.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp5.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp5.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp6.w = sqrt(tmp1.w);
                        tmp8.w = 0.0;
                        tmp9.x = 0.0;
                        for (int j = tmp9.x; j < tmp5.w; j += 1) {
                            tmp9.y = floor(j);
                            tmp9.z = tmp9.y + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.w;
                            tmp9.y = tmp9.y * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp9.y);
                            tmp11.x = cos(tmp9.y);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                            tmp8.w = tmp8.w + tmp9.y;
                        }
                        tmp1.w = tmp8.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp6.z ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp4.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp4.xzw, tmp4.xzw);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp3.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.x);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp4.xz = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp5 = tex2D(_ShadowMapTexture, tmp4.xz);
                tmp6 = tex2D(NGSS_FrustumShadowsTexture, tmp4.xz);
                tmp4.x = saturate(tmp6.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.x = min(tmp4.x, tmp5.x);
                tmp4.x = tmp4.x - tmp5.x;
                tmp4.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.x + tmp5.x;
                tmp3.w = tmp3.w - tmp4.x;
                tmp2.w = tmp2.w * tmp3.w + tmp4.x;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL_COOKIE && FOG_EXP && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5
            sampler2D _LightTexture0; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp5.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp5.xyz, tmp5.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp3.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.xy = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp6 = tex2D(_ShadowMapTexture, tmp5.xy);
                tmp5 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xy);
                tmp4.w = saturate(tmp5.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp6.x);
                tmp4.w = tmp4.w - tmp6.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp6.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && POINT && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && POINT_COOKIE && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4 unity_FogParams; // 16 (starting at cb5[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb6[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb6[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb6[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb6[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SHADOWS_DEPTH && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp6.xzw = tmp8.xyz / tmp8.www;
                    tmp3.w = tex2D(_ShadowMapTexture, tmp6.xz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp8.xyz = tmp8.xyz / tmp8.www;
                    tmp9.xy = tmp6.zx * _ScreenParams.yx;
                    tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                    tmp10 = tmp10 >= -tmp10.yyww;
                    tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp9.xy = tmp9.xy * tmp10.yw;
                    tmp9.xy = frac(tmp9.xy);
                    tmp9.xy = tmp9.xy * tmp10.xz;
                    tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                    tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                    tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                    tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                    tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                    tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                    tmp6.xz = tmp6.xz * _ScreenParams.xy;
                    tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                    tmp2.z = tmp2.z - tmp9.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp5.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp5.w = tmp1.w * tmp5.w;
                    tmp5.w = max(tmp5.w, 4.0);
                    tmp5.w = min(tmp5.w, 64.0);
                    tmp6.x = asint(tmp5.w);
                    tmp4.w = tmp4.w * 0.0175;
                    tmp5.w = trunc(tmp5.w);
                    tmp6.z = sqrt(tmp5.w);
                    tmp6.w = 0.0;
                    tmp8.w = 0.0;
                    for (int i = tmp8.w; i < tmp6.x; i += 1) {
                        tmp9.x = floor(i);
                        tmp9.y = tmp9.x + 0.5;
                        tmp9.y = sqrt(tmp9.y);
                        tmp9.y = tmp9.y / tmp6.z;
                        tmp9.x = tmp9.x * 2.4 + tmp2.z;
                        tmp9.x = sin(tmp9.x);
                        tmp10.x = cos(tmp9.x);
                        tmp10.x = tmp9.y * tmp10.x;
                        tmp10.y = tmp9.x * tmp9.y;
                        tmp9.xy = tmp10.xy * tmp4.ww + tmp8.xy;
                        tmp9.x = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp6.w = tmp6.w + tmp9.x;
                    }
                    tmp5.w = tmp6.w / tmp5.w;
                    tmp6.xz = tmp5.ww == float2(1.0, 0.0);
                    tmp5.w = uint1(tmp6.z) | uint1(tmp6.x);
                    if (!(tmp5.w)) {
                        tmp5.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp5.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp5.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp6.w = sqrt(tmp1.w);
                        tmp8.w = 0.0;
                        tmp9.x = 0.0;
                        for (int j = tmp9.x; j < tmp5.w; j += 1) {
                            tmp9.y = floor(j);
                            tmp9.z = tmp9.y + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.w;
                            tmp9.y = tmp9.y * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp9.y);
                            tmp11.x = cos(tmp9.y);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                            tmp8.w = tmp8.w + tmp9.y;
                        }
                        tmp1.w = tmp8.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp6.z ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp4.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp4.xzw, tmp4.xzw);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp3.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.x);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp4.xz = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp5 = tex2D(_ShadowMapTexture, tmp4.xz);
                tmp6 = tex2D(NGSS_FrustumShadowsTexture, tmp4.xz);
                tmp4.x = saturate(tmp6.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.x = min(tmp4.x, tmp5.x);
                tmp4.x = tmp4.x - tmp5.x;
                tmp4.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.x + tmp5.x;
                tmp3.w = tmp3.w - tmp4.x;
                tmp2.w = tmp2.w * tmp3.w + tmp4.x;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5
            sampler2D _LightTexture0; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp5.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp5.xyz, tmp5.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp3.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.xy = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp6 = tex2D(_ShadowMapTexture, tmp5.xy);
                tmp5 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xy);
                tmp4.w = saturate(tmp5.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp6.x);
                tmp4.w = tmp4.w - tmp6.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp6.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT_COOKIE && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTexture0, tmp3.ww);
                tmp2.w = tmp2.w * tmp6.x;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL && FOG_EXP
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp2.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4
            sampler2D _LightTextureB0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp6 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp6 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp6;
                tmp6 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp6;
                tmp6 = tmp6 + unity_WorldToLight._m03_m13_m23_m33;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                    tmp5.xzw = tmp5.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xzw = tmp2.www ? tmp5.xzw : inp.texcoord4.xyz;
                    tmp5.xzw = tmp5.xzw - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp5.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp3.w = tmp6.z > 0.0;
                tmp3.w = uint1(tmp3.w) & uint1(1);
                tmp5.xz = tmp6.xy / tmp6.ww;
                tmp5.xz = tmp5.xz + float2(0.5, 0.5);
                tmp7 = tex2D(_LightTexture0, tmp5.xz);
                tmp3.w = tmp3.w * tmp7.w;
                tmp4.w = dot(tmp6.xyz, tmp6.xyz);
                tmp6 = tex2D(_LightTextureB0, tmp4.ww);
                tmp3.w = tmp3.w * tmp6.x;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && FOG_EXP && POINT_COOKIE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTextureB0; // 4
            samplerCUBE _LightTexture0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTextureB0, tmp3.ww);
                tmp7 = texCUBE(_LightTexture0, tmp5.xzw);
                tmp3.w = tmp6.x * tmp7.w;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE && FOG_EXP
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp2.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif SHADOWS_DEPTH && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_WorldToShadow[4]; // 128 (starting at cb3[8].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            sampler2D _LightTextureB0; // 6
            sampler2D _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp7 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp7 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp7;
                tmp7 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp7;
                tmp7 = tmp7 + unity_WorldToLight._m03_m13_m23_m33;
                tmp8.x = unity_MatrixV._m20;
                tmp8.y = unity_MatrixV._m21;
                tmp8.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp8.xyz);
                tmp6.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp6.xzw, tmp6.xzw);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xzw = tmp2.yyy ? tmp6.xzw : inp.texcoord4.xyz;
                    tmp6.xzw = tmp6.xzw - unity_ProbeVolumeMin;
                    tmp8.yzw = tmp6.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp8.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp8.x = max(tmp2.z, tmp2.y);
                    tmp8 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp8.xzw);
                } else {
                    tmp8 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp8, unity_OcclusionMaskSelector));
                tmp8 = inp.texcoord4.yyyy * unity_WorldToShadow[1]._m01_m11_m21_m31;
                tmp8 = unity_WorldToShadow[0]._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp8;
                tmp8 = unity_WorldToShadow[2]._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp8;
                tmp8 = tmp8 + unity_WorldToShadow[3]._m03_m13_m23_m33;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp6.xzw = tmp8.xyz / tmp8.www;
                    tmp3.w = tex2D(_ShadowMapTexture, tmp6.xz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp6.xzw = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp6.xzw = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp6.xzw;
                    tmp6.xzw = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp6.xzw;
                    tmp6.xzw = tmp6.xzw + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp6.xw * float2(0.5, 0.5);
                    tmp2.z = tmp6.z * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp6.xz = tmp9.zz + tmp9.xw;
                    tmp6.xz = tmp6.xz / tmp6.ww;
                    tmp8.xyz = tmp8.xyz / tmp8.www;
                    tmp9.xy = tmp6.zx * _ScreenParams.yx;
                    tmp10 = tmp9.xxyy * float4(4.0, 4.0, 4.0, 4.0);
                    tmp10 = tmp10 >= -tmp10.yyww;
                    tmp10 = tmp10 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp9.xy = tmp9.xy * tmp10.yw;
                    tmp9.xy = frac(tmp9.xy);
                    tmp9.xy = tmp9.xy * tmp10.xz;
                    tmp10.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp9.y + 0].yzw);
                    tmp10.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp9.y + 0]);
                    tmp10.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp9.y + 0]);
                    tmp10.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp9.y + 0]);
                    tmp2.z = dot(tmp10, icb[tmp9.x + 0]);
                    tmp6.xz = tmp6.xz * _BlueNoiseTexture_TexelSize.xy;
                    tmp6.xz = tmp6.xz * _ScreenParams.xy;
                    tmp9 = tex2D(_BlueNoiseTexture, tmp6.xz);
                    tmp2.z = tmp2.z - tmp9.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp9.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp5.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp5.w = tmp1.w * tmp5.w;
                    tmp5.w = max(tmp5.w, 4.0);
                    tmp5.w = min(tmp5.w, 64.0);
                    tmp6.x = asint(tmp5.w);
                    tmp4.w = tmp4.w * 0.0175;
                    tmp5.w = trunc(tmp5.w);
                    tmp6.z = sqrt(tmp5.w);
                    tmp6.w = 0.0;
                    tmp8.w = 0.0;
                    for (int i = tmp8.w; i < tmp6.x; i += 1) {
                        tmp9.x = floor(i);
                        tmp9.y = tmp9.x + 0.5;
                        tmp9.y = sqrt(tmp9.y);
                        tmp9.y = tmp9.y / tmp6.z;
                        tmp9.x = tmp9.x * 2.4 + tmp2.z;
                        tmp9.x = sin(tmp9.x);
                        tmp10.x = cos(tmp9.x);
                        tmp10.x = tmp9.y * tmp10.x;
                        tmp10.y = tmp9.x * tmp9.y;
                        tmp9.xy = tmp10.xy * tmp4.ww + tmp8.xy;
                        tmp9.x = tex2D(_ShadowMapTexture, tmp9.xy);
                        tmp6.w = tmp6.w + tmp9.x;
                    }
                    tmp5.w = tmp6.w / tmp5.w;
                    tmp6.xz = tmp5.ww == float2(1.0, 0.0);
                    tmp5.w = uint1(tmp6.z) | uint1(tmp6.x);
                    if (!(tmp5.w)) {
                        tmp5.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp5.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp5.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp6.w = sqrt(tmp1.w);
                        tmp8.w = 0.0;
                        tmp9.x = 0.0;
                        for (int j = tmp9.x; j < tmp5.w; j += 1) {
                            tmp9.y = floor(j);
                            tmp9.z = tmp9.y + 0.5;
                            tmp9.z = sqrt(tmp9.z);
                            tmp9.z = tmp9.z / tmp6.w;
                            tmp9.y = tmp9.y * 2.4 + tmp2.z;
                            tmp10.x = sin(tmp9.y);
                            tmp11.x = cos(tmp9.y);
                            tmp11.x = tmp9.z * tmp11.x;
                            tmp11.y = tmp9.z * tmp10.x;
                            tmp9.yz = tmp11.xy * tmp4.ww + tmp8.xy;
                            tmp9.y = tex2D(_ShadowMapTexture, tmp9.yz);
                            tmp8.w = tmp8.w + tmp9.y;
                        }
                        tmp1.w = tmp8.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp6.z ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp6.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = tmp7.z > 0.0;
                tmp2.x = uint1(tmp2.x) & uint1(1);
                tmp2.yz = tmp7.xy / tmp7.ww;
                tmp2.yz = tmp2.yz + float2(0.5, 0.5);
                tmp8 = tex2D(_LightTexture0, tmp2.yz);
                tmp2.x = tmp2.x * tmp8.w;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp7 = tex2D(_LightTextureB0, tmp2.yy);
                tmp2.x = tmp2.x * tmp7.x;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp4.xzw = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp4.xzw, tmp4.xzw);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp3.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.x = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.x);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp4.xz = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp5 = tex2D(_ShadowMapTexture, tmp4.xz);
                tmp6 = tex2D(NGSS_FrustumShadowsTexture, tmp4.xz);
                tmp4.x = saturate(tmp6.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.x = min(tmp4.x, tmp5.x);
                tmp4.x = tmp4.x - tmp5.x;
                tmp4.x = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.x + tmp5.x;
                tmp3.w = tmp3.w - tmp4.x;
                tmp2.w = tmp2.w * tmp3.w + tmp4.x;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL_COOKIE && SHADOWS_SCREEN
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float NGSS_FRUSTUM_SHADOWS_ENABLED; // 144 (starting at cb0[9].x)
            float NGSS_FRUSTUM_SHADOWS_OPACITY; // 148 (starting at cb0[9].y)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ShadowMapTexture; // 4
            sampler2D NGSS_FrustumShadowsTexture; // 5
            sampler2D _LightTexture0; // 6

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp5.x = unity_MatrixV._m20;
                tmp5.y = unity_MatrixV._m21;
                tmp5.z = unity_MatrixV._m22;
                tmp2.w = dot(tmp0.xyz, tmp5.xyz);
                tmp5.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp3.w = dot(tmp5.xyz, tmp5.xyz);
                tmp3.w = sqrt(tmp3.w);
                tmp3.w = tmp3.w - tmp2.w;
                tmp2.w = unity_ShadowFadeCenterAndType.w * tmp3.w + tmp2.w;
                tmp2.w = saturate(tmp2.w * _LightShadowData.z + _LightShadowData.w);
                tmp3.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp3.w) {
                    tmp3.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp3.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp3.w = tmp5.y * 0.25 + 0.75;
                    tmp4.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp3.w, tmp4.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp3.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.xy = inp.texcoord7.xy / inp.texcoord7.ww;
                tmp6 = tex2D(_ShadowMapTexture, tmp5.xy);
                tmp5 = tex2D(NGSS_FrustumShadowsTexture, tmp5.xy);
                tmp4.w = saturate(tmp5.x + NGSS_FRUSTUM_SHADOWS_OPACITY);
                tmp4.w = min(tmp4.w, tmp6.x);
                tmp4.w = tmp4.w - tmp6.x;
                tmp4.w = NGSS_FRUSTUM_SHADOWS_ENABLED * tmp4.w + tmp6.x;
                tmp3.w = tmp3.w - tmp4.w;
                tmp2.w = tmp2.w * tmp3.w + tmp4.w;
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif POINT && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTexture0; // 5
            samplerCUBE _ShadowMapTexture; // 7

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTexture0, tmp2.xx);
                tmp1.w = tmp1.w * tmp7.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif POINT_COOKIE && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            int NGSS_TEST_SAMPLERS; // 64 (starting at cb0[4].x)
            int NGSS_FILTER_SAMPLERS; // 68 (starting at cb0[4].y)
            float NGSS_LOCAL_SAMPLING_DISTANCE; // 72 (starting at cb0[4].z)
            float NGSS_GLOBAL_OPACITY; // 76 (starting at cb0[4].w)
            float NGSS_NOISE_TO_DITHERING_SCALE; // 80 (starting at cb0[5].x)
            float NGSS_FORCE_HARD_SHADOWS; // 96 (starting at cb0[6].x)
            float4 _BlueNoiseTexture_TexelSize; // 112 (starting at cb0[7].x)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 _LightProjectionParams; // 32 (starting at cb2[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 _LightShadowData; // 384 (starting at cb3[24].x)
            // float4 unity_ShadowFadeCenterAndType; // 400 (starting at cb3[25].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb5[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb5[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb5[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb5[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _BlueNoiseTexture; // 4
            sampler2D _LightTextureB0; // 5
            samplerCUBE _LightTexture0; // 6
            samplerCUBE _ShadowMapTexture; // 8

            fout frag(v2f inp)
            {
                fout o;
                const float4 icb[4] = {
                    float4(1.0, 0.0, 0.0, 0.0),
                    float4(0.0, 1.0, 0.0, 0.0),
                    float4(0.0, 0.0, 1.0, 0.0),
                    float4(0.0, 0.0, 0.0, 1.0)
                };
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                float4 tmp10;
                float4 tmp11;
                float4 tmp12;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp2.w = rsqrt(tmp1.w);
                tmp3.xyz = tmp2.www * tmp2.xyz;
                tmp4.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp4.xy = tmp4.xy * _ScreenParams.xy;
                tmp4.xy = tmp4.xy * float2(0.25, 0.25);
                tmp4 = tex2D(unity_DitherMask, tmp4.xy);
                tmp2.w = _Fade - tmp4.w;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp2.w = inp.color.x * -_FirstPerson;
                tmp2.w = tmp2.w < 0.0;
                if (tmp2.w) {
                    discard;
                }
                tmp4.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp4.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp5 = tex2D(_Normal, tmp4.zw);
                tmp5.x = tmp5.w * tmp5.x;
                tmp5.xy = tmp5.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp2.w = dot(tmp5.xy, tmp5.xy);
                tmp2.w = min(tmp2.w, 1.0);
                tmp2.w = 1.0 - tmp2.w;
                tmp5.z = sqrt(tmp2.w);
                tmp4.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp6 = tex2D(_RMOE, tmp4.zw);
                tmp4 = tex2D(_Albedo, tmp4.xy);
                tmp2.w = 1.0 - tmp6.x;
                tmp6.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp6.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xzw;
                tmp6.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xzw;
                tmp6.xzw = tmp6.xzw + unity_WorldToLight._m03_m13_m23;
                tmp7.x = unity_MatrixV._m20;
                tmp7.y = unity_MatrixV._m21;
                tmp7.z = unity_MatrixV._m22;
                tmp2.x = dot(tmp2.xyz, tmp7.xyz);
                tmp7.xyz = inp.texcoord4.xyz - unity_ShadowFadeCenterAndType.xyz;
                tmp2.y = dot(tmp7.xyz, tmp7.xyz);
                tmp2.y = sqrt(tmp2.y);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = unity_ShadowFadeCenterAndType.w * tmp2.y + tmp2.x;
                tmp2.x = saturate(tmp2.x * _LightShadowData.z + _LightShadowData.w);
                tmp2.y = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.y) {
                    tmp2.y = unity_ProbeVolumeParams.y == 1.0;
                    tmp7.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp7.xyz;
                    tmp7.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp7.xyz;
                    tmp7.xyz = tmp7.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp7.xyz = tmp2.yyy ? tmp7.xyz : inp.texcoord4.xyz;
                    tmp7.xyz = tmp7.xyz - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp7.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.y = tmp7.y * 0.25 + 0.75;
                    tmp2.z = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.z, tmp2.y);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.y = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp7.xyz = inp.texcoord4.xyz - _LightPositionRange.xyz;
                tmp2.z = NGSS_FORCE_HARD_SHADOWS > 0.0;
                if (tmp2.z) {
                    tmp3.w = max(abs(tmp7.y), abs(tmp7.x));
                    tmp3.w = max(abs(tmp7.z), tmp3.w);
                    tmp3.w = tmp3.w - _LightProjectionParams.z;
                    tmp3.w = max(tmp3.w, 0.0);
                    tmp3.w = _LightProjectionParams.y / tmp3.w;
                    tmp3.w = tmp3.w - _LightProjectionParams.x;
                    tmp3.w = 1.0 - tmp3.w;
                    tmp3.w = texCUBE(_ShadowMapTexture, tmp7.xyz);
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp3.w = tmp3.w * tmp4.w + _LightShadowData.x;
                }
                if (!(tmp2.z)) {
                    tmp1.w = sqrt(tmp1.w);
                    tmp8.xyz = inp.texcoord4.yyy * unity_MatrixVP._m01_m11_m31;
                    tmp8.xyz = unity_MatrixVP._m00_m10_m30 * inp.texcoord4.xxx + tmp8.xyz;
                    tmp8.xyz = unity_MatrixVP._m02_m12_m32 * inp.texcoord4.zzz + tmp8.xyz;
                    tmp8.xyz = tmp8.xyz + unity_MatrixVP._m03_m13_m33;
                    tmp9.xz = tmp8.xz * float2(0.5, 0.5);
                    tmp2.z = tmp8.y * _ProjectionParams.x;
                    tmp9.w = tmp2.z * 0.5;
                    tmp8.xy = tmp9.zz + tmp9.xw;
                    tmp8.xy = tmp8.xy / tmp8.zz;
                    tmp8.zw = tmp8.yx * _ScreenParams.yx;
                    tmp9 = tmp8.zzww * float4(4.0, 4.0, 4.0, 4.0);
                    tmp9 = tmp9 >= -tmp9.yyww;
                    tmp9 = tmp9 ? float4(4.0, 0.25, 4.0, 0.25) : float4(-4.0, -0.25, -4.0, -0.25);
                    tmp8.zw = tmp8.zw * tmp9.yw;
                    tmp8.zw = frac(tmp8.zw);
                    tmp8.zw = tmp8.zw * tmp9.xz;
                    tmp9.x = dot(float4(0.75, 0.1875, 0.9375, 0.0), icb[tmp8.w + 0].yzw);
                    tmp9.y = dot(float4(0.5, 0.22, 0.6875, 0.4375), icb[tmp8.w + 0]);
                    tmp9.z = dot(float4(0.125, 0.875, 0.0625, 0.8125), icb[tmp8.w + 0]);
                    tmp9.w = dot(float4(0.625, 0.375, 0.5625, 0.3125), icb[tmp8.w + 0]);
                    tmp2.z = dot(tmp9, icb[tmp8.z + 0]);
                    tmp8.xy = tmp8.xy * _BlueNoiseTexture_TexelSize.xy;
                    tmp8.xy = tmp8.xy * _ScreenParams.xy;
                    tmp8 = tex2D(_BlueNoiseTexture, tmp8.xy);
                    tmp2.z = tmp2.z - tmp8.x;
                    tmp2.z = NGSS_NOISE_TO_DITHERING_SCALE * tmp2.z + tmp8.x;
                    tmp2.z = tmp2.z * 12.56637;
                    tmp4.w = max(tmp1.w, 1.0);
                    tmp2.z = tmp2.z / tmp4.w;
                    tmp8.xyz = tmp7.xyz * tmp7.zxy;
                    tmp8.xyz = tmp7.yzx * tmp7.yzx + -tmp8.xyz;
                    tmp4.w = dot(tmp8.xyz, tmp8.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp7.zxy * tmp8.yzx;
                    tmp9.xyz = tmp7.yzx * tmp8.zxy + -tmp9.xyz;
                    tmp4.w = dot(tmp9.xyz, tmp9.xyz);
                    tmp4.w = rsqrt(tmp4.w);
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = 1.0 - _LightShadowData.x;
                    tmp4.w = tmp4.w * 0.25;
                    tmp8.xyz = tmp4.www * tmp8.xyz;
                    tmp9.xyz = tmp4.www * tmp9.xyz;
                    tmp4.w = floor(NGSS_TEST_SAMPLERS);
                    tmp1.w = min(tmp1.w, NGSS_LOCAL_SAMPLING_DISTANCE);
                    tmp1.w = tmp1.w / NGSS_LOCAL_SAMPLING_DISTANCE;
                    tmp1.w = 1.0 - tmp1.w;
                    tmp4.w = tmp1.w * tmp4.w;
                    tmp4.w = max(tmp4.w, 4.0);
                    tmp4.w = min(tmp4.w, 64.0);
                    tmp5.w = asint(tmp4.w);
                    tmp4.w = trunc(tmp4.w);
                    tmp7.w = sqrt(tmp4.w);
                    tmp8.w = 0.0;
                    tmp9.w = 0.0;
                    for (int i = tmp9.w; i < tmp5.w; i += 1) {
                        tmp10.x = floor(i);
                        tmp10.y = tmp10.x + 0.5;
                        tmp10.y = sqrt(tmp10.y);
                        tmp10.y = tmp10.y / tmp7.w;
                        tmp10.x = tmp10.x * 2.4 + tmp2.z;
                        tmp10.x = sin(tmp10.x);
                        tmp11.x = cos(tmp10.x);
                        tmp10.z = tmp10.y * tmp11.x;
                        tmp10.x = tmp10.x * tmp10.y;
                        tmp10.xyw = tmp9.xyz * tmp10.xxx;
                        tmp10.xyz = tmp8.xyz * tmp10.zzz + tmp10.xyw;
                        tmp10.xyz = tmp10.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                        tmp10.w = max(abs(tmp10.y), abs(tmp10.x));
                        tmp10.w = max(abs(tmp10.z), tmp10.w);
                        tmp10.w = tmp10.w - _LightProjectionParams.z;
                        tmp10.w = max(tmp10.w, 0.0);
                        tmp10.w = _LightProjectionParams.y / tmp10.w;
                        tmp10.w = tmp10.w - _LightProjectionParams.x;
                        tmp10.w = 1.0 - tmp10.w;
                        tmp10.x = texCUBE(_ShadowMapTexture, tmp10.xyz);
                        tmp8.w = tmp8.w + tmp10.x;
                    }
                    tmp4.w = tmp8.w / tmp4.w;
                    tmp10.xy = tmp4.ww == float2(1.0, 0.0);
                    tmp4.w = uint1(tmp10.y) | uint1(tmp10.x);
                    if (!(tmp4.w)) {
                        tmp4.w = floor(NGSS_FILTER_SAMPLERS);
                        tmp1.w = tmp1.w * tmp4.w;
                        tmp1.w = max(tmp1.w, 4.0);
                        tmp1.w = min(tmp1.w, 64.0);
                        tmp4.w = asint(tmp1.w);
                        tmp1.w = trunc(tmp1.w);
                        tmp5.w = sqrt(tmp1.w);
                        tmp7.w = 0.0;
                        tmp8.w = 0.0;
                        for (int j = tmp8.w; j < tmp4.w; j += 1) {
                            tmp9.w = floor(j);
                            tmp10.z = tmp9.w + 0.5;
                            tmp10.z = sqrt(tmp10.z);
                            tmp10.z = tmp10.z / tmp5.w;
                            tmp9.w = tmp9.w * 2.4 + tmp2.z;
                            tmp11.x = sin(tmp9.w);
                            tmp12.x = cos(tmp9.w);
                            tmp9.w = tmp10.z * tmp12.x;
                            tmp10.z = tmp10.z * tmp11.x;
                            tmp11.xyz = tmp9.xyz * tmp10.zzz;
                            tmp11.xyz = tmp8.xyz * tmp9.www + tmp11.xyz;
                            tmp11.xyz = tmp11.xyz * float3(0.35, 0.35, 0.35) + tmp7.xyz;
                            tmp9.w = max(abs(tmp11.y), abs(tmp11.x));
                            tmp9.w = max(abs(tmp11.z), tmp9.w);
                            tmp9.w = tmp9.w - _LightProjectionParams.z;
                            tmp9.w = max(tmp9.w, 0.0);
                            tmp9.w = _LightProjectionParams.y / tmp9.w;
                            tmp9.w = tmp9.w - _LightProjectionParams.x;
                            tmp9.w = 1.0 - tmp9.w;
                            tmp9.w = texCUBE(_ShadowMapTexture, tmp11.xyz);
                            tmp7.w = tmp7.w + tmp9.w;
                        }
                        tmp1.w = tmp7.w / tmp1.w;
                        tmp2.z = 1.0 - NGSS_GLOBAL_OPACITY;
                        tmp3.w = tmp1.w * tmp2.z + NGSS_GLOBAL_OPACITY;
                    } else {
                        tmp1.w = tmp10.y ? NGSS_GLOBAL_OPACITY : tmp3.w;
                        tmp3.w = tmp10.x ? 1.0 : tmp1.w;
                    }
                }
                tmp1.w = tmp2.y - tmp3.w;
                tmp1.w = tmp2.x * tmp1.w + tmp3.w;
                tmp2.x = dot(tmp6.xzw, tmp6.xzw);
                tmp7 = tex2D(_LightTextureB0, tmp2.xx);
                tmp8 = texCUBE(_LightTexture0, tmp6.xzw);
                tmp2.x = tmp7.x * tmp8.w;
                tmp1.w = tmp1.w * tmp2.x;
                tmp2.x = dot(inp.texcoord1.xyz, tmp5.xyz);
                tmp2.y = dot(inp.texcoord2.xyz, tmp5.xyz);
                tmp2.z = dot(inp.texcoord3.xyz, tmp5.xyz);
                tmp3.w = dot(tmp2.xyz, tmp2.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp2.xyz = tmp2.xyz * tmp3.www;
                tmp5.xyz = tmp1.www * _LightColor0.xyz;
                tmp6.xzw = tmp4.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xzw = tmp6.yyy * tmp6.xzw + float3(0.04, 0.04, 0.04);
                tmp1.w = -tmp6.y * 0.96 + 0.96;
                tmp4.xyz = tmp1.www * tmp4.xyz;
                tmp1.w = 1.0 - tmp2.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp3.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp3.xyz);
                tmp2.w = saturate(dot(tmp2.xyz, tmp1.xyz));
                tmp2.x = saturate(dot(tmp2.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.w;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.w * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.w * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.x * tmp0.z + -tmp2.x;
                tmp1.x = tmp1.x * tmp2.x + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.ww * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xzw, tmp6.xzw);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xyz;
                tmp0.yzw = tmp5.xyz * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xzw;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xzw;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp4.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && POINT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTexture0, tmp3.ww);
                tmp2.w = tmp2.w * tmp6.x;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL && FOG_EXP
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp2.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4
            sampler2D _LightTextureB0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp6 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp6 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp6;
                tmp6 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp6;
                tmp6 = tmp6 + unity_WorldToLight._m03_m13_m23_m33;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                    tmp5.xzw = tmp5.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xzw = tmp2.www ? tmp5.xzw : inp.texcoord4.xyz;
                    tmp5.xzw = tmp5.xzw - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp5.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp3.w = tmp6.z > 0.0;
                tmp3.w = uint1(tmp3.w) & uint1(1);
                tmp5.xz = tmp6.xy / tmp6.ww;
                tmp5.xz = tmp5.xz + float2(0.5, 0.5);
                tmp7 = tex2D(_LightTexture0, tmp5.xz);
                tmp3.w = tmp3.w * tmp7.w;
                tmp4.w = dot(tmp6.xyz, tmp6.xyz);
                tmp6 = tex2D(_LightTextureB0, tmp4.ww);
                tmp3.w = tmp3.w * tmp6.x;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif FOG_EXP && POINT_COOKIE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTextureB0; // 4
            samplerCUBE _LightTexture0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTextureB0, tmp3.ww);
                tmp7 = texCUBE(_LightTexture0, tmp5.xzw);
                tmp3.w = tmp6.x * tmp7.w;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                tmp0.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL_COOKIE && FOG_EXP
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4 unity_FogParams; // 16 (starting at cb3[1].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb4[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb4[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb4[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb4[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp2.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                tmp0.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                tmp0.w = inp.texcoord8.x / _ProjectionParams.y;
                tmp0.w = 1.0 - tmp0.w;
                tmp0.w = tmp0.w * _ProjectionParams.z;
                tmp0.w = max(tmp0.w, 0.0);
                tmp0.w = tmp0.w * unity_FogParams.y;
                tmp0.w = pow(2.0, -tmp0.w);
                tmp0.w = min(tmp0.w, 1.0);
                o.sv_target.xyz = tmp0.xyz * tmp0.www;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTexture0, tmp3.ww);
                tmp2.w = tmp2.w * tmp6.x;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 328 (starting at cb0[20].z)
            float4 _Normal_ST; // 224 (starting at cb0[14].x)
            float4 _Albedo_ST; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 324 (starting at cb0[20].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp2.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4
            sampler2D _LightTextureB0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp6 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp6 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp6;
                tmp6 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp6;
                tmp6 = tmp6 + unity_WorldToLight._m03_m13_m23_m33;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                    tmp5.xzw = tmp5.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xzw = tmp2.www ? tmp5.xzw : inp.texcoord4.xyz;
                    tmp5.xzw = tmp5.xzw - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp5.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp3.w = tmp6.z > 0.0;
                tmp3.w = uint1(tmp3.w) & uint1(1);
                tmp5.xz = tmp6.xy / tmp6.ww;
                tmp5.xz = tmp5.xz + float2(0.5, 0.5);
                tmp7 = tex2D(_LightTexture0, tmp5.xz);
                tmp3.w = tmp3.w * tmp7.w;
                tmp4.w = dot(tmp6.xyz, tmp6.xyz);
                tmp6 = tex2D(_LightTextureB0, tmp4.ww);
                tmp3.w = tmp3.w * tmp6.x;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && POINT_COOKIE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTextureB0; // 4
            samplerCUBE _LightTexture0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTextureB0, tmp3.ww);
                tmp7 = texCUBE(_LightTexture0, tmp5.xzw);
                tmp3.w = tmp6.x * tmp7.w;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && DIRECTIONAL_COOKIE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 408 (starting at cb0[25].z)
            float4 _Normal_ST; // 304 (starting at cb0[19].x)
            float4 _Albedo_ST; // 320 (starting at cb0[20].x)
            float4 _RMOE_ST; // 352 (starting at cb0[22].x)
            float _FirstPerson; // 404 (starting at cb0[25].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp2.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif POINT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTexture0, tmp3.ww);
                tmp2.w = tmp2.w * tmp6.x;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif DIRECTIONAL
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 264 (starting at cb0[16].z)
            float4 _Normal_ST; // 160 (starting at cb0[10].x)
            float4 _Albedo_ST; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 260 (starting at cb0[16].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp4.xzw;
                    tmp4.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp4.xzw;
                    tmp4.xzw = tmp4.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xzw = tmp2.www ? tmp4.xzw : inp.texcoord4.xyz;
                    tmp4.xzw = tmp4.xzw - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp4.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif SPOT
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4
            sampler2D _LightTextureB0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp6 = inp.texcoord4.yyyy * unity_WorldToLight._m01_m11_m21_m31;
                tmp6 = unity_WorldToLight._m00_m10_m20_m30 * inp.texcoord4.xxxx + tmp6;
                tmp6 = unity_WorldToLight._m02_m12_m22_m32 * inp.texcoord4.zzzz + tmp6;
                tmp6 = tmp6 + unity_WorldToLight._m03_m13_m23_m33;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xzw = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                    tmp5.xzw = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                    tmp5.xzw = tmp5.xzw + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xzw = tmp2.www ? tmp5.xzw : inp.texcoord4.xyz;
                    tmp5.xzw = tmp5.xzw - unity_ProbeVolumeMin;
                    tmp7.yzw = tmp5.xzw * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp7.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp7.x = max(tmp2.w, tmp3.w);
                    tmp7 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp7.xzw);
                } else {
                    tmp7 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp7, unity_OcclusionMaskSelector));
                tmp3.w = tmp6.z > 0.0;
                tmp3.w = uint1(tmp3.w) & uint1(1);
                tmp5.xz = tmp6.xy / tmp6.ww;
                tmp5.xz = tmp5.xz + float2(0.5, 0.5);
                tmp7 = tex2D(_LightTexture0, tmp5.xz);
                tmp3.w = tmp3.w * tmp7.w;
                tmp4.w = dot(tmp6.xyz, tmp6.xyz);
                tmp6 = tex2D(_LightTextureB0, tmp4.ww);
                tmp3.w = tmp3.w * tmp6.x;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #elif POINT_COOKIE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTextureB0; // 4
            samplerCUBE _LightTexture0; // 5

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                tmp0.xyz = _WorldSpaceLightPos0.xyz - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp1.w = dot(tmp2.xyz, tmp2.xyz);
                tmp1.w = rsqrt(tmp1.w);
                tmp2.xyz = tmp1.www * tmp2.xyz;
                tmp3.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp3.xy = tmp3.xy * _ScreenParams.xy;
                tmp3.xy = tmp3.xy * float2(0.25, 0.25);
                tmp3 = tex2D(unity_DitherMask, tmp3.xy);
                tmp1.w = _Fade - tmp3.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp3.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp3.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp4 = tex2D(_Normal, tmp3.zw);
                tmp4.x = tmp4.w * tmp4.x;
                tmp4.xy = tmp4.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp4.xy, tmp4.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp4.z = sqrt(tmp1.w);
                tmp3.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp5 = tex2D(_RMOE, tmp3.zw);
                tmp3 = tex2D(_Albedo, tmp3.xy);
                tmp1.w = 1.0 - tmp5.x;
                tmp5.xzw = inp.texcoord4.yyy * unity_WorldToLight._m01_m11_m21;
                tmp5.xzw = unity_WorldToLight._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xzw;
                tmp5.xzw = unity_WorldToLight._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xzw;
                tmp5.xzw = tmp5.xzw + unity_WorldToLight._m03_m13_m23;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp6.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp6.xyz;
                    tmp6.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp6.xyz;
                    tmp6.xyz = tmp6.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp6.xyz = tmp2.www ? tmp6.xyz : inp.texcoord4.xyz;
                    tmp6.xyz = tmp6.xyz - unity_ProbeVolumeMin;
                    tmp6.yzw = tmp6.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp6.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp6.x = max(tmp2.w, tmp3.w);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xzw);
                } else {
                    tmp6 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp6, unity_OcclusionMaskSelector));
                tmp3.w = dot(tmp5.xzw, tmp5.xzw);
                tmp6 = tex2D(_LightTextureB0, tmp3.ww);
                tmp7 = texCUBE(_LightTexture0, tmp5.xzw);
                tmp3.w = tmp6.x * tmp7.w;
                tmp2.w = tmp2.w * tmp3.w;
                tmp6.x = dot(inp.texcoord1.xyz, tmp4.xyz);
                tmp6.y = dot(inp.texcoord2.xyz, tmp4.xyz);
                tmp6.z = dot(inp.texcoord3.xyz, tmp4.xyz);
                tmp3.w = dot(tmp6.xyz, tmp6.xyz);
                tmp3.w = rsqrt(tmp3.w);
                tmp4.xyz = tmp3.www * tmp6.xyz;
                tmp5.xzw = tmp2.www * _LightColor0.xyz;
                tmp6.xyz = tmp3.xyz - float3(0.04, 0.04, 0.04);
                tmp6.xyz = tmp5.yyy * tmp6.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp5.y * 0.96 + 0.96;
                tmp3.xyz = tmp2.www * tmp3.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp4.xyz, tmp2.xyz);
                tmp2.x = saturate(dot(tmp4.xyz, tmp1.xyz));
                tmp2.y = saturate(dot(tmp4.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(tmp1.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp2.x;
                tmp1.x = tmp0.z * tmp0.z;
                tmp1.x = tmp1.x * tmp1.x;
                tmp0.z = tmp0.z * tmp1.x;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.x = 1.0 - abs(tmp0.w);
                tmp1.y = tmp1.x * tmp1.x;
                tmp1.y = tmp1.y * tmp1.y;
                tmp1.x = tmp1.x * tmp1.y;
                tmp0.y = tmp0.y * tmp1.x + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.x = 1.0 - tmp0.z;
                tmp1.y = abs(tmp0.w) * tmp1.x + tmp0.z;
                tmp1.x = tmp2.x * tmp1.x + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.x;
                tmp0.w = tmp2.x * tmp1.y + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.x = tmp2.y * tmp0.z + -tmp2.y;
                tmp1.x = tmp1.x * tmp2.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.x = tmp1.x * tmp1.x + 0.0000001;
                tmp0.z = tmp0.z / tmp1.x;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp2.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp6.xyz, tmp6.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp5.xzw;
                tmp0.yzw = tmp5.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp2.xyz = float3(1.0, 1.0, 1.0) - tmp6.xyz;
                tmp2.xyz = tmp2.xyz * tmp0.xxx + tmp6.xyz;
                tmp0.xyz = tmp0.yzw * tmp2.xyz;
                o.sv_target.xyz = tmp3.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }

            #else
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _Fade; // 344 (starting at cb0[21].z)
            float4 _Normal_ST; // 240 (starting at cb0[15].x)
            float4 _Albedo_ST; // 256 (starting at cb0[16].x)
            float4 _RMOE_ST; // 288 (starting at cb0[18].x)
            float _FirstPerson; // 340 (starting at cb0[21].y)
            float4 _LightColor0; // 32 (starting at cb0[2].x)
            // float4 unity_OcclusionMaskSelector; // 736 (starting at cb2[46].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _LightTexture0; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                tmp0.xyz = _WorldSpaceCameraPos - inp.texcoord4.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp0.xyz;
                tmp2.xy = inp.texcoord5.xy / inp.texcoord5.ww;
                tmp2.xy = tmp2.xy * _ScreenParams.xy;
                tmp2.xy = tmp2.xy * float2(0.25, 0.25);
                tmp2 = tex2D(unity_DitherMask, tmp2.xy);
                tmp1.w = _Fade - tmp2.w;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp1.w = inp.color.x * -_FirstPerson;
                tmp1.w = tmp1.w < 0.0;
                if (tmp1.w) {
                    discard;
                }
                tmp2.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp2.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp3 = tex2D(_Normal, tmp2.zw);
                tmp3.x = tmp3.w * tmp3.x;
                tmp3.xy = tmp3.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp1.w = dot(tmp3.xy, tmp3.xy);
                tmp1.w = min(tmp1.w, 1.0);
                tmp1.w = 1.0 - tmp1.w;
                tmp3.z = sqrt(tmp1.w);
                tmp2.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp4 = tex2D(_RMOE, tmp2.zw);
                tmp2 = tex2D(_Albedo, tmp2.xy);
                tmp1.w = 1.0 - tmp4.x;
                tmp4.xz = inp.texcoord4.yy * unity_WorldToLight._m01_m11;
                tmp4.xz = unity_WorldToLight._m00_m10 * inp.texcoord4.xx + tmp4.xz;
                tmp4.xz = unity_WorldToLight._m02_m12 * inp.texcoord4.zz + tmp4.xz;
                tmp4.xz = tmp4.xz + unity_WorldToLight._m03_m13;
                tmp2.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp2.w) {
                    tmp2.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord4.yyy * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord4.xxx + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord4.zzz + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.xyz = tmp2.www ? tmp5.xyz : inp.texcoord4.xyz;
                    tmp5.xyz = tmp5.xyz - unity_ProbeVolumeMin;
                    tmp5.yzw = tmp5.xyz * unity_ProbeVolumeSizeInv;
                    tmp2.w = tmp5.y * 0.25 + 0.75;
                    tmp3.w = unity_ProbeVolumeParams.z * 0.5 + 0.75;
                    tmp5.x = max(tmp2.w, tmp3.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp5.xzw);
                } else {
                    tmp5 = float4(1.0, 1.0, 1.0, 1.0);
                }
                tmp2.w = saturate(dot(tmp5, unity_OcclusionMaskSelector));
                tmp5 = tex2D(_LightTexture0, tmp4.xz);
                tmp2.w = tmp2.w * tmp5.w;
                tmp5.x = dot(inp.texcoord1.xyz, tmp3.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp3.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp3.xyz);
                tmp3.x = dot(tmp5.xyz, tmp5.xyz);
                tmp3.x = rsqrt(tmp3.x);
                tmp3.xyz = tmp3.xxx * tmp5.xyz;
                tmp4.xzw = tmp2.www * _LightColor0.xyz;
                tmp5.xyz = tmp2.xyz - float3(0.04, 0.04, 0.04);
                tmp5.xyz = tmp4.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp2.w = -tmp4.y * 0.96 + 0.96;
                tmp2.xyz = tmp2.www * tmp2.xyz;
                tmp1.w = 1.0 - tmp1.w;
                tmp0.xyz = tmp0.xyz * tmp0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = max(tmp0.w, 0.001);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp0.w = dot(tmp3.xyz, tmp1.xyz);
                tmp1.x = saturate(dot(tmp3.xyz, _WorldSpaceLightPos0.xyz));
                tmp1.y = saturate(dot(tmp3.xyz, tmp0.xyz));
                tmp0.x = saturate(dot(_WorldSpaceLightPos0.xyz, tmp0.xyz));
                tmp0.y = tmp0.x * tmp0.x;
                tmp0.y = dot(tmp0.yy, tmp1.ww);
                tmp0.y = tmp0.y - 0.5;
                tmp0.z = 1.0 - tmp1.x;
                tmp1.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.z * tmp1.z;
                tmp0.z = tmp0.z * tmp1.z;
                tmp0.z = tmp0.y * tmp0.z + 1.0;
                tmp1.z = 1.0 - abs(tmp0.w);
                tmp2.w = tmp1.z * tmp1.z;
                tmp2.w = tmp2.w * tmp2.w;
                tmp1.z = tmp1.z * tmp2.w;
                tmp0.y = tmp0.y * tmp1.z + 1.0;
                tmp0.y = tmp0.y * tmp0.z;
                tmp0.z = tmp1.w * tmp1.w;
                tmp0.z = max(tmp0.z, 0.002);
                tmp1.z = 1.0 - tmp0.z;
                tmp1.w = abs(tmp0.w) * tmp1.z + tmp0.z;
                tmp1.z = tmp1.x * tmp1.z + tmp0.z;
                tmp0.w = abs(tmp0.w) * tmp1.z;
                tmp0.w = tmp1.x * tmp1.w + tmp0.w;
                tmp0.w = tmp0.w + 0.00001;
                tmp0.w = 0.5 / tmp0.w;
                tmp0.z = tmp0.z * tmp0.z;
                tmp1.z = tmp1.y * tmp0.z + -tmp1.y;
                tmp1.y = tmp1.z * tmp1.y + 1.0;
                tmp0.z = tmp0.z * 0.3183099;
                tmp1.y = tmp1.y * tmp1.y + 0.0000001;
                tmp0.z = tmp0.z / tmp1.y;
                tmp0.z = tmp0.z * tmp0.w;
                tmp0.z = tmp0.z * 3.141593;
                tmp0.yz = tmp1.xx * tmp0.yz;
                tmp0.z = max(tmp0.z, 0.0);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = tmp0.w != 0.0;
                tmp0.w = uint1(tmp0.w) & uint1(1);
                tmp0.z = tmp0.w * tmp0.z;
                tmp1.xyz = tmp0.yyy * tmp4.xzw;
                tmp0.yzw = tmp4.xzw * tmp0.zzz;
                tmp0.x = 1.0 - tmp0.x;
                tmp1.w = tmp0.x * tmp0.x;
                tmp1.w = tmp1.w * tmp1.w;
                tmp0.x = tmp0.x * tmp1.w;
                tmp3.xyz = float3(1.0, 1.0, 1.0) - tmp5.xyz;
                tmp3.xyz = tmp3.xyz * tmp0.xxx + tmp5.xyz;
                tmp0.xyz = tmp0.yzw * tmp3.xyz;
                o.sv_target.xyz = tmp2.xyz * tmp1.xyz + tmp0.xyz;
                o.sv_target.w = 1.0;
                return o;
            }
            #endif
            ENDCG
            
        }
        Pass {
            Name "DEFERRED"
            ZClip On
            Tags {
                "IsEmissive"="true"
                "LIGHTMODE"="DEFERRED"
                "QUEUE"="Geometry+0"
                "RenderType"="Opaque"
            }
            CGPROGRAM
            
            #pragma vertex vert
            #pragma fragment frag

            #pragma shader_feature _ELECTRIC_SHOCK_ON
            #pragma shader_feature LIGHTPROBE_SH
            #pragma shader_feature UNITY_HDR_ON
            

            #if _ELECTRIC_SHOCK_ON && LIGHTPROBE_SH && UNITY_HDR_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float3 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 320 (starting at cb0[20].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord7.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                return o;
            }

            #elif LIGHTPROBE_SH && UNITY_HDR_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float3 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 256 (starting at cb0[16].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord7.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && LIGHTPROBE_SH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float3 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 320 (starting at cb0[20].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord7.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && UNITY_HDR_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 320 (starting at cb0[20].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif LIGHTPROBE_SH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
                float3 texcoord7 : TEXCOORD7;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 256 (starting at cb0[16].x)
            // float4 unity_SHBr; // 672 (starting at cb2[42].x)
            // float4 unity_SHBg; // 688 (starting at cb2[43].x)
            // float4 unity_SHBb; // 704 (starting at cb2[44].x)
            // float4 unity_SHC; // 720 (starting at cb2[45].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb3[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp2.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp2.xyz;
                tmp2.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp2.xyz;
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                o.texcoord1.x = tmp2.z;
                tmp3.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp3.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp3.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3 = tmp0.xxxx * tmp3.xyzz;
                tmp4.xyz = tmp2.xyz * tmp3.wxy;
                tmp4.xyz = tmp3.ywx * tmp2.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.z = tmp3.x;
                o.texcoord2.x = tmp2.x;
                o.texcoord3.x = tmp2.y;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                o.texcoord2.z = tmp3.y;
                o.texcoord3.z = tmp3.w;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                tmp0.x = tmp3.y * tmp3.y;
                tmp0.x = tmp3.x * tmp3.x + -tmp0.x;
                tmp1 = tmp3.ywzx * tmp3;
                tmp2.x = dot(unity_SHBr, tmp1);
                tmp2.y = dot(unity_SHBg, tmp1);
                tmp2.z = dot(unity_SHBb, tmp1);
                o.texcoord7.xyz = unity_SHC.xyz * tmp0.xxx + tmp2.xyz;
                return o;
            }

            #elif UNITY_HDR_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 256 (starting at cb0[16].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 320 (starting at cb0[20].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #else
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float2 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 texcoord4 : TEXCOORD4;
                float4 color : COLOR;
                float4 texcoord6 : TEXCOORD6;
            };

            // CBs for DX11VertexSM40
            float4 _texcoord_ST; // 256 (starting at cb0[16].x)
            // float4 unity_WorldTransformParams; // 144 (starting at cb2[9].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                tmp0 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp0 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp0;
                tmp0 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp0;
                tmp1 = tmp0 + unity_ObjectToWorld._m03_m13_m23_m33;
                tmp0.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                tmp2 = tmp1.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp1.xxxx + tmp2;
                tmp2 = unity_MatrixVP._m02_m12_m22_m32 * tmp1.zzzz + tmp2;
                tmp1 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp2;
                o.position = tmp1;
                o.texcoord.xy = v.texcoord.xy * _texcoord_ST.xy + _texcoord_ST.zw;
                o.texcoord1.w = tmp0.x;
                tmp2.y = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp2.z = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp2.x = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.x = dot(tmp2.xyz, tmp2.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp2.xyz = tmp0.xxx * tmp2.xyz;
                tmp3.xyz = v.tangent.yyy * unity_ObjectToWorld._m11_m21_m01;
                tmp3.xyz = unity_ObjectToWorld._m10_m20_m00 * v.tangent.xxx + tmp3.xyz;
                tmp3.xyz = unity_ObjectToWorld._m12_m22_m02 * v.tangent.zzz + tmp3.xyz;
                tmp0.x = dot(tmp3.xyz, tmp3.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp3.xyz = tmp0.xxx * tmp3.xyz;
                tmp4.xyz = tmp2.xyz * tmp3.xyz;
                tmp4.xyz = tmp2.zxy * tmp3.yzx + -tmp4.xyz;
                tmp0.x = v.tangent.w * unity_WorldTransformParams.w;
                tmp4.xyz = tmp0.xxx * tmp4.xyz;
                o.texcoord1.y = tmp4.x;
                o.texcoord1.x = tmp3.z;
                o.texcoord1.z = tmp2.y;
                o.texcoord2.x = tmp3.x;
                o.texcoord3.x = tmp3.y;
                o.texcoord2.z = tmp2.z;
                o.texcoord3.z = tmp2.x;
                o.texcoord2.w = tmp0.y;
                o.texcoord3.w = tmp0.z;
                o.texcoord2.y = tmp4.y;
                o.texcoord3.y = tmp4.z;
                tmp0.x = tmp1.y * _ProjectionParams.x;
                tmp0.w = tmp0.x * 0.5;
                tmp0.xz = tmp1.xw * float2(0.5, 0.5);
                o.texcoord4.zw = tmp1.zw;
                o.texcoord4.xy = tmp0.zz + tmp0.xw;
                o.color = v.color;
                o.texcoord6 = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }
            #endif


            #if _ELECTRIC_SHOCK_ON && LIGHTPROBE_SH && UNITY_HDR_ON
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float _ElectricShockIntensity; // 132 (starting at cb0[8].y)
            float4 _ElectricShockColor; // 144 (starting at cb0[9].x)
            float _ElectricShockSpeed; // 160 (starting at cb0[10].x)
            float _ElectricShockScale; // 164 (starting at cb0[10].y)
            float4 _ElectricShockTexture_ST; // 176 (starting at cb0[11].x)
            float _ElectricShockTexturePanSpeed; // 192 (starting at cb0[12].x)
            float4 _Normal_ST; // 208 (starting at cb0[13].x)
            float4 _Albedo_ST; // 224 (starting at cb0[14].x)
            float _Irradiated; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 256 (starting at cb0[16].x)
            float4 _EmissiveColor; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 308 (starting at cb0[19].y)
            float _Fade; // 312 (starting at cb0[19].z)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp1 = tex2D(_Normal, tmp0.zw);
                tmp1.x = tmp1.w * tmp1.x;
                tmp1.xy = tmp1.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.z = dot(tmp1.xy, tmp1.xy);
                tmp0.z = min(tmp0.z, 1.0);
                tmp0.z = 1.0 - tmp0.z;
                tmp1.z = sqrt(tmp0.z);
                tmp0.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp2 = tex2D(_RMOE, tmp0.zw);
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp3.z = _ElectricShockSpeed * _Time.y;
                tmp4.y = inp.texcoord1.w;
                tmp4.z = inp.texcoord2.w;
                tmp4.w = inp.texcoord3.w;
                tmp5.xyz = tmp4.yzw * _ElectricShockScale.xxx;
                tmp3.xy = float2(0.0, 0.0);
                tmp6.xyz = tmp4.yzw * _ElectricShockScale.xxx + tmp3.yyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp0.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp0.w = sin(tmp0.w);
                tmp0.w = tmp0.w * 43758.55;
                tmp0.w = frac(tmp0.w);
                tmp1.w = tmp6.z * 4.0;
                tmp3.w = tmp0.w * tmp1.w;
                tmp0.w = tmp0.w * 6.283185 + tmp3.w;
                tmp4.x = sin(tmp0.w);
                tmp8.x = cos(tmp0.w);
                tmp8.y = tmp4.x;
                tmp0.w = dot(tmp8.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp1.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp9 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp8.y = tmp4.x;
                tmp3.w = dot(tmp8.xy, tmp9.xy);
                tmp3.w = tmp3.w - tmp0.w;
                tmp0.w = tmp7.z * tmp3.w + tmp0.w;
                tmp3.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp1.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp8.y = tmp4.x;
                tmp3.w = dot(tmp8.xy, tmp9.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp4.x = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp1.w = tmp1.w * tmp4.x;
                tmp1.w = tmp4.x * 6.283185 + tmp1.w;
                tmp4.x = sin(tmp1.w);
                tmp7.x = cos(tmp1.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp7.y = tmp4.x;
                tmp1.w = dot(tmp7.xy, tmp6.xy);
                tmp1.w = tmp1.w - tmp3.w;
                tmp1.w = tmp7.z * tmp1.w + tmp3.w;
                tmp1.w = tmp1.w - tmp0.w;
                tmp0.w = tmp7.w * tmp1.w + tmp0.w;
                tmp6.xyz = tmp5.xyz * float3(2.0, 2.0, 2.0) + tmp3.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp1.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.x = tmp1.w * tmp3.w;
                tmp1.w = tmp1.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp1.w);
                tmp8.x = cos(tmp1.w);
                tmp8.y = tmp4.x;
                tmp1.w = dot(tmp8.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.x = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp9 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.xy);
                tmp4.x = tmp4.x - tmp1.w;
                tmp1.w = tmp7.z * tmp4.x + tmp1.w;
                tmp4.x = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp5.w = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp5.w = sin(tmp5.w);
                tmp5.w = tmp5.w * 43758.55;
                tmp5.w = frac(tmp5.w);
                tmp3.w = tmp3.w * tmp5.w;
                tmp3.w = tmp5.w * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.x;
                tmp3.w = tmp7.z * tmp3.w + tmp4.x;
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp7.w * tmp3.w + tmp1.w;
                tmp1.w = tmp1.w * 0.7142857;
                tmp0.w = tmp0.w * 1.428571 + tmp1.w;
                tmp6.xyz = tmp5.xyz * float3(4.0, 4.0, 4.0) + tmp3.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp1.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.x = tmp1.w * tmp3.w;
                tmp1.w = tmp1.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp1.w);
                tmp8.x = cos(tmp1.w);
                tmp8.y = tmp4.x;
                tmp1.w = dot(tmp8.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.x = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp9 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.xy);
                tmp4.x = tmp4.x - tmp1.w;
                tmp1.w = tmp7.z * tmp4.x + tmp1.w;
                tmp4.x = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp5.w = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp5.w = sin(tmp5.w);
                tmp5.w = tmp5.w * 43758.55;
                tmp5.w = frac(tmp5.w);
                tmp3.w = tmp3.w * tmp5.w;
                tmp3.w = tmp5.w * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.x;
                tmp3.w = tmp7.z * tmp3.w + tmp4.x;
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp7.w * tmp3.w + tmp1.w;
                tmp0.w = tmp1.w * 0.3571429 + tmp0.w;
                tmp3.xyz = tmp5.xyz * float3(8.0, 8.0, 8.0) + tmp3.xyz;
                tmp5.xy = floor(tmp3.xy);
                tmp3.xy = tmp3.xy - tmp5.xy;
                tmp5.zw = tmp3.xy * tmp3.xy;
                tmp6.xy = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp5.zw = tmp5.zw * tmp6.xy;
                tmp1.w = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp3.z = tmp3.z * 4.0;
                tmp3.w = tmp1.w * tmp3.z;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp4.x = sin(tmp1.w);
                tmp6.x = cos(tmp1.w);
                tmp6.y = tmp4.x;
                tmp1.w = dot(tmp6.xy, tmp3.xy);
                tmp6 = tmp5.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp6.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp3.w * tmp3.z;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp7 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp6.y = tmp4.x;
                tmp3.w = dot(tmp6.xy, tmp7.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp5.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp3.w * tmp3.z;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp6.y = tmp4.x;
                tmp3.w = dot(tmp6.xy, tmp7.zw);
                tmp5.xy = tmp5.xy + float2(1.0, 1.0);
                tmp4.x = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp3.z = tmp3.z * tmp4.x;
                tmp3.z = tmp4.x * 6.283185 + tmp3.z;
                tmp4.x = sin(tmp3.z);
                tmp5.x = cos(tmp3.z);
                tmp3.xy = tmp3.xy - float2(1.0, 1.0);
                tmp5.y = tmp4.x;
                tmp3.x = dot(tmp5.xy, tmp3.xy);
                tmp3.x = tmp3.x - tmp3.w;
                tmp3.x = tmp5.z * tmp3.x + tmp3.w;
                tmp3.x = tmp3.x - tmp1.w;
                tmp1.w = tmp5.w * tmp3.x + tmp1.w;
                tmp0.w = tmp1.w * 0.1785714 + tmp0.w;
                tmp0.w = tmp0.w * 0.5;
                tmp3.xy = -abs(tmp0.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp3.x = saturate(tmp3.x);
                tmp0.w = tmp3.x * 0.1;
                tmp1.w = max(tmp3.y, 0.0);
                tmp0.w = max(tmp0.w, tmp1.w);
                tmp1.w = _Time.y * _ElectricShockSpeed + tmp0.w;
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 0.2 + 0.8;
                tmp3.xyz = tmp1.www * _ElectricShockColor.xyz;
                tmp5.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp6.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp6.y = 0.0;
                tmp5.xy = tmp5.xy + tmp6.xy;
                tmp5 = tex2D(_ElectricShockTexture, tmp5.xy);
                tmp3.xyz = tmp3.xyz * tmp5.xyz;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                tmp3.xyz = tmp3.xyz * _ElectricShockIntensity.xxx;
                tmp0.w = _Irradiated != 0.0;
                tmp5.xyz = tmp2.www * float3(0.2950229, 1.0, 0.0);
                tmp6.xyz = tmp2.www * _EmissiveColor.xyz;
                tmp5.xyz = tmp0.www ? tmp5.xyz : tmp6.xyz;
                tmp3.xyz = tmp3.xyz * float3(20.0, 20.0, 20.0) + tmp5.xyz;
                o.sv_target1.w = 1.0 - tmp2.x;
                tmp5.x = dot(inp.texcoord1.xyz, tmp1.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp1.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp1.xyz);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp5.xyz;
                tmp0.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp0.w) {
                    tmp0.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xyz = tmp0.www ? tmp5.xyz : tmp4.yzw;
                    tmp4.xyz = tmp4.xyz - unity_ProbeVolumeMin;
                    tmp4.yzw = tmp4.xyz * unity_ProbeVolumeSizeInv;
                    tmp0.w = tmp4.y * 0.25;
                    tmp2.x = unity_ProbeVolumeParams.z * 0.5;
                    tmp2.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp0.w = max(tmp0.w, tmp2.x);
                    tmp4.x = min(tmp2.w, tmp0.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xzw);
                    tmp6.xyz = tmp4.xzw + float3(0.25, 0.0, 0.0);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xyz);
                    tmp4.xyz = tmp4.xzw + float3(0.5, 0.0, 0.0);
                    tmp4 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xyz);
                    tmp1.w = 1.0;
                    tmp5.x = dot(tmp5, tmp1);
                    tmp5.y = dot(tmp6, tmp1);
                    tmp5.z = dot(tmp4, tmp1);
                } else {
                    tmp1.w = 1.0;
                    tmp5.x = dot(unity_SHAr, tmp1);
                    tmp5.y = dot(unity_SHAg, tmp1);
                    tmp5.z = dot(unity_SHAb, tmp1);
                }
                tmp4.xyz = tmp5.xyz + inp.texcoord7.xyz;
                tmp4.xyz = max(tmp4.xyz, float3(0.0, 0.0, 0.0));
                tmp4.xyz = tmp2.zzz * tmp4.xyz;
                tmp5.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp2.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp0.w = -tmp2.y * 0.96 + 0.96;
                tmp0.xyz = tmp0.www * tmp0.xyz;
                o.sv_target2.xyz = tmp1.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                o.sv_target3.xyz = tmp0.xyz * tmp4.xyz + tmp3.xyz;
                o.sv_target.w = tmp2.z;
                o.sv_target.xyz = tmp0.xyz;
                o.sv_target2.w = 1.0;
                o.sv_target3.w = 1.0;
                return o;
            }

            #elif LIGHTPROBE_SH && UNITY_HDR_ON
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float4 _Normal_ST; // 144 (starting at cb0[9].x)
            float4 _Albedo_ST; // 160 (starting at cb0[10].x)
            float _Irradiated; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 192 (starting at cb0[12].x)
            float4 _EmissiveColor; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 244 (starting at cb0[15].y)
            float _Fade; // 248 (starting at cb0[15].z)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp1 = tex2D(_Normal, tmp0.zw);
                tmp1.x = tmp1.w * tmp1.x;
                tmp1.xy = tmp1.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.z = dot(tmp1.xy, tmp1.xy);
                tmp0.z = min(tmp0.z, 1.0);
                tmp0.z = 1.0 - tmp0.z;
                tmp1.z = sqrt(tmp0.z);
                tmp0.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp2 = tex2D(_RMOE, tmp0.zw);
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp0.w = _Irradiated != 0.0;
                tmp3.xyz = tmp2.www * float3(0.2950229, 1.0, 0.0);
                tmp4.xyz = tmp2.www * _EmissiveColor.xyz;
                tmp3.xyz = tmp0.www ? tmp3.xyz : tmp4.xyz;
                o.sv_target1.w = 1.0 - tmp2.x;
                tmp4.x = dot(inp.texcoord1.xyz, tmp1.xyz);
                tmp4.y = dot(inp.texcoord2.xyz, tmp1.xyz);
                tmp4.z = dot(inp.texcoord3.xyz, tmp1.xyz);
                tmp0.w = dot(tmp4.xyz, tmp4.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp4.xyz;
                tmp0.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp0.w) {
                    tmp0.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp4.xyz;
                    tmp4.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp4.xyz;
                    tmp4.xyz = tmp4.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.y = inp.texcoord1.w;
                    tmp5.z = inp.texcoord2.w;
                    tmp5.w = inp.texcoord3.w;
                    tmp4.xyz = tmp0.www ? tmp4.xyz : tmp5.yzw;
                    tmp4.xyz = tmp4.xyz - unity_ProbeVolumeMin;
                    tmp4.yzw = tmp4.xyz * unity_ProbeVolumeSizeInv;
                    tmp0.w = tmp4.y * 0.25;
                    tmp2.x = unity_ProbeVolumeParams.z * 0.5;
                    tmp2.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp0.w = max(tmp0.w, tmp2.x);
                    tmp4.x = min(tmp2.w, tmp0.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xzw);
                    tmp6.xyz = tmp4.xzw + float3(0.25, 0.0, 0.0);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xyz);
                    tmp4.xyz = tmp4.xzw + float3(0.5, 0.0, 0.0);
                    tmp4 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xyz);
                    tmp1.w = 1.0;
                    tmp5.x = dot(tmp5, tmp1);
                    tmp5.y = dot(tmp6, tmp1);
                    tmp5.z = dot(tmp4, tmp1);
                } else {
                    tmp1.w = 1.0;
                    tmp5.x = dot(unity_SHAr, tmp1);
                    tmp5.y = dot(unity_SHAg, tmp1);
                    tmp5.z = dot(unity_SHAb, tmp1);
                }
                tmp4.xyz = tmp5.xyz + inp.texcoord7.xyz;
                tmp4.xyz = max(tmp4.xyz, float3(0.0, 0.0, 0.0));
                tmp4.xyz = tmp2.zzz * tmp4.xyz;
                tmp5.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp2.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp0.w = -tmp2.y * 0.96 + 0.96;
                tmp0.xyz = tmp0.www * tmp0.xyz;
                o.sv_target2.xyz = tmp1.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                o.sv_target3.xyz = tmp0.xyz * tmp4.xyz + tmp3.xyz;
                o.sv_target.w = tmp2.z;
                o.sv_target.xyz = tmp0.xyz;
                o.sv_target2.w = 1.0;
                o.sv_target3.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && LIGHTPROBE_SH
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float _ElectricShockIntensity; // 132 (starting at cb0[8].y)
            float4 _ElectricShockColor; // 144 (starting at cb0[9].x)
            float _ElectricShockSpeed; // 160 (starting at cb0[10].x)
            float _ElectricShockScale; // 164 (starting at cb0[10].y)
            float4 _ElectricShockTexture_ST; // 176 (starting at cb0[11].x)
            float _ElectricShockTexturePanSpeed; // 192 (starting at cb0[12].x)
            float4 _Normal_ST; // 208 (starting at cb0[13].x)
            float4 _Albedo_ST; // 224 (starting at cb0[14].x)
            float _Irradiated; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 256 (starting at cb0[16].x)
            float4 _EmissiveColor; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 308 (starting at cb0[19].y)
            float _Fade; // 312 (starting at cb0[19].z)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                float4 tmp9;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp1 = tex2D(_Normal, tmp0.zw);
                tmp1.x = tmp1.w * tmp1.x;
                tmp1.xy = tmp1.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.z = dot(tmp1.xy, tmp1.xy);
                tmp0.z = min(tmp0.z, 1.0);
                tmp0.z = 1.0 - tmp0.z;
                tmp1.z = sqrt(tmp0.z);
                tmp0.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp2 = tex2D(_RMOE, tmp0.zw);
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp3.z = _ElectricShockSpeed * _Time.y;
                tmp4.y = inp.texcoord1.w;
                tmp4.z = inp.texcoord2.w;
                tmp4.w = inp.texcoord3.w;
                tmp5.xyz = tmp4.yzw * _ElectricShockScale.xxx;
                tmp3.xy = float2(0.0, 0.0);
                tmp6.xyz = tmp4.yzw * _ElectricShockScale.xxx + tmp3.yyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp0.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp0.w = sin(tmp0.w);
                tmp0.w = tmp0.w * 43758.55;
                tmp0.w = frac(tmp0.w);
                tmp1.w = tmp6.z * 4.0;
                tmp3.w = tmp0.w * tmp1.w;
                tmp0.w = tmp0.w * 6.283185 + tmp3.w;
                tmp4.x = sin(tmp0.w);
                tmp8.x = cos(tmp0.w);
                tmp8.y = tmp4.x;
                tmp0.w = dot(tmp8.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp1.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp9 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp8.y = tmp4.x;
                tmp3.w = dot(tmp8.xy, tmp9.xy);
                tmp3.w = tmp3.w - tmp0.w;
                tmp0.w = tmp7.z * tmp3.w + tmp0.w;
                tmp3.w = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp1.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp8.y = tmp4.x;
                tmp3.w = dot(tmp8.xy, tmp9.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp4.x = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp1.w = tmp1.w * tmp4.x;
                tmp1.w = tmp4.x * 6.283185 + tmp1.w;
                tmp4.x = sin(tmp1.w);
                tmp7.x = cos(tmp1.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp7.y = tmp4.x;
                tmp1.w = dot(tmp7.xy, tmp6.xy);
                tmp1.w = tmp1.w - tmp3.w;
                tmp1.w = tmp7.z * tmp1.w + tmp3.w;
                tmp1.w = tmp1.w - tmp0.w;
                tmp0.w = tmp7.w * tmp1.w + tmp0.w;
                tmp6.xyz = tmp5.xyz * float3(2.0, 2.0, 2.0) + tmp3.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp1.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.x = tmp1.w * tmp3.w;
                tmp1.w = tmp1.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp1.w);
                tmp8.x = cos(tmp1.w);
                tmp8.y = tmp4.x;
                tmp1.w = dot(tmp8.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.x = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp9 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.xy);
                tmp4.x = tmp4.x - tmp1.w;
                tmp1.w = tmp7.z * tmp4.x + tmp1.w;
                tmp4.x = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp5.w = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp5.w = sin(tmp5.w);
                tmp5.w = tmp5.w * 43758.55;
                tmp5.w = frac(tmp5.w);
                tmp3.w = tmp3.w * tmp5.w;
                tmp3.w = tmp5.w * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.x;
                tmp3.w = tmp7.z * tmp3.w + tmp4.x;
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp7.w * tmp3.w + tmp1.w;
                tmp1.w = tmp1.w * 0.7142857;
                tmp0.w = tmp0.w * 1.428571 + tmp1.w;
                tmp6.xyz = tmp5.xyz * float3(4.0, 4.0, 4.0) + tmp3.xyz;
                tmp7.xy = floor(tmp6.xy);
                tmp6.xy = tmp6.xy - tmp7.xy;
                tmp7.zw = tmp6.xy * tmp6.xy;
                tmp8.xy = -tmp6.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp7.zw = tmp7.zw * tmp8.xy;
                tmp1.w = dot(tmp7.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp3.w = tmp6.z * 4.0;
                tmp4.x = tmp1.w * tmp3.w;
                tmp1.w = tmp1.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp1.w);
                tmp8.x = cos(tmp1.w);
                tmp8.y = tmp4.x;
                tmp1.w = dot(tmp8.xy, tmp6.xy);
                tmp8 = tmp7.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp4.x = dot(tmp8.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp9 = tmp6.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.xy);
                tmp4.x = tmp4.x - tmp1.w;
                tmp1.w = tmp7.z * tmp4.x + tmp1.w;
                tmp4.x = dot(tmp8.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp5.w = tmp3.w * tmp4.x;
                tmp4.x = tmp4.x * 6.283185 + tmp5.w;
                tmp4.x = sin(tmp4.x);
                tmp8.x = cos(tmp4.x);
                tmp8.y = tmp4.x;
                tmp4.x = dot(tmp8.xy, tmp9.zw);
                tmp6.zw = tmp7.xy + float2(1.0, 1.0);
                tmp5.w = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp5.w = sin(tmp5.w);
                tmp5.w = tmp5.w * 43758.55;
                tmp5.w = frac(tmp5.w);
                tmp3.w = tmp3.w * tmp5.w;
                tmp3.w = tmp5.w * 6.283185 + tmp3.w;
                tmp7.x = sin(tmp3.w);
                tmp8.x = cos(tmp3.w);
                tmp6.xy = tmp6.xy - float2(1.0, 1.0);
                tmp8.y = tmp7.x;
                tmp3.w = dot(tmp8.xy, tmp6.xy);
                tmp3.w = tmp3.w - tmp4.x;
                tmp3.w = tmp7.z * tmp3.w + tmp4.x;
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp7.w * tmp3.w + tmp1.w;
                tmp0.w = tmp1.w * 0.3571429 + tmp0.w;
                tmp3.xyz = tmp5.xyz * float3(8.0, 8.0, 8.0) + tmp3.xyz;
                tmp5.xy = floor(tmp3.xy);
                tmp3.xy = tmp3.xy - tmp5.xy;
                tmp5.zw = tmp3.xy * tmp3.xy;
                tmp6.xy = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp5.zw = tmp5.zw * tmp6.xy;
                tmp1.w = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp3.z = tmp3.z * 4.0;
                tmp3.w = tmp1.w * tmp3.z;
                tmp1.w = tmp1.w * 6.283185 + tmp3.w;
                tmp4.x = sin(tmp1.w);
                tmp6.x = cos(tmp1.w);
                tmp6.y = tmp4.x;
                tmp1.w = dot(tmp6.xy, tmp3.xy);
                tmp6 = tmp5.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp6.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp3.w * tmp3.z;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp7 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp6.y = tmp4.x;
                tmp3.w = dot(tmp6.xy, tmp7.xy);
                tmp3.w = tmp3.w - tmp1.w;
                tmp1.w = tmp5.z * tmp3.w + tmp1.w;
                tmp3.w = dot(tmp6.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.w = frac(tmp3.w);
                tmp4.x = tmp3.w * tmp3.z;
                tmp3.w = tmp3.w * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp6.y = tmp4.x;
                tmp3.w = dot(tmp6.xy, tmp7.zw);
                tmp5.xy = tmp5.xy + float2(1.0, 1.0);
                tmp4.x = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp3.z = tmp3.z * tmp4.x;
                tmp3.z = tmp4.x * 6.283185 + tmp3.z;
                tmp4.x = sin(tmp3.z);
                tmp5.x = cos(tmp3.z);
                tmp3.xy = tmp3.xy - float2(1.0, 1.0);
                tmp5.y = tmp4.x;
                tmp3.x = dot(tmp5.xy, tmp3.xy);
                tmp3.x = tmp3.x - tmp3.w;
                tmp3.x = tmp5.z * tmp3.x + tmp3.w;
                tmp3.x = tmp3.x - tmp1.w;
                tmp1.w = tmp5.w * tmp3.x + tmp1.w;
                tmp0.w = tmp1.w * 0.1785714 + tmp0.w;
                tmp0.w = tmp0.w * 0.5;
                tmp3.xy = -abs(tmp0.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp3.x = saturate(tmp3.x);
                tmp0.w = tmp3.x * 0.1;
                tmp1.w = max(tmp3.y, 0.0);
                tmp0.w = max(tmp0.w, tmp1.w);
                tmp1.w = _Time.y * _ElectricShockSpeed + tmp0.w;
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 0.2 + 0.8;
                tmp3.xyz = tmp1.www * _ElectricShockColor.xyz;
                tmp5.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp6.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp6.y = 0.0;
                tmp5.xy = tmp5.xy + tmp6.xy;
                tmp5 = tex2D(_ElectricShockTexture, tmp5.xy);
                tmp3.xyz = tmp3.xyz * tmp5.xyz;
                tmp3.xyz = tmp0.www * tmp3.xyz;
                tmp3.xyz = tmp3.xyz * _ElectricShockIntensity.xxx;
                tmp0.w = _Irradiated != 0.0;
                tmp5.xyz = tmp2.www * float3(0.2950229, 1.0, 0.0);
                tmp6.xyz = tmp2.www * _EmissiveColor.xyz;
                tmp5.xyz = tmp0.www ? tmp5.xyz : tmp6.xyz;
                tmp3.xyz = tmp3.xyz * float3(20.0, 20.0, 20.0) + tmp5.xyz;
                o.sv_target1.w = 1.0 - tmp2.x;
                tmp5.x = dot(inp.texcoord1.xyz, tmp1.xyz);
                tmp5.y = dot(inp.texcoord2.xyz, tmp1.xyz);
                tmp5.z = dot(inp.texcoord3.xyz, tmp1.xyz);
                tmp0.w = dot(tmp5.xyz, tmp5.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp5.xyz;
                tmp0.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp0.w) {
                    tmp0.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp5.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp5.xyz;
                    tmp5.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp5.xyz;
                    tmp5.xyz = tmp5.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp4.xyz = tmp0.www ? tmp5.xyz : tmp4.yzw;
                    tmp4.xyz = tmp4.xyz - unity_ProbeVolumeMin;
                    tmp4.yzw = tmp4.xyz * unity_ProbeVolumeSizeInv;
                    tmp0.w = tmp4.y * 0.25;
                    tmp2.x = unity_ProbeVolumeParams.z * 0.5;
                    tmp2.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp0.w = max(tmp0.w, tmp2.x);
                    tmp4.x = min(tmp2.w, tmp0.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xzw);
                    tmp6.xyz = tmp4.xzw + float3(0.25, 0.0, 0.0);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xyz);
                    tmp4.xyz = tmp4.xzw + float3(0.5, 0.0, 0.0);
                    tmp4 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xyz);
                    tmp1.w = 1.0;
                    tmp5.x = dot(tmp5, tmp1);
                    tmp5.y = dot(tmp6, tmp1);
                    tmp5.z = dot(tmp4, tmp1);
                } else {
                    tmp1.w = 1.0;
                    tmp5.x = dot(unity_SHAr, tmp1);
                    tmp5.y = dot(unity_SHAg, tmp1);
                    tmp5.z = dot(unity_SHAb, tmp1);
                }
                tmp4.xyz = tmp5.xyz + inp.texcoord7.xyz;
                tmp4.xyz = max(tmp4.xyz, float3(0.0, 0.0, 0.0));
                tmp4.xyz = tmp2.zzz * tmp4.xyz;
                tmp5.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp2.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp0.w = -tmp2.y * 0.96 + 0.96;
                tmp0.xyz = tmp0.www * tmp0.xyz;
                o.sv_target2.xyz = tmp1.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                tmp1.xyz = tmp0.xyz * tmp4.xyz + tmp3.xyz;
                o.sv_target3.xyz = pow(2.0, -tmp1.xyz);
                o.sv_target.w = tmp2.z;
                o.sv_target.xyz = tmp0.xyz;
                o.sv_target2.w = 1.0;
                o.sv_target3.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && UNITY_HDR_ON
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float _ElectricShockIntensity; // 132 (starting at cb0[8].y)
            float4 _ElectricShockColor; // 144 (starting at cb0[9].x)
            float _ElectricShockSpeed; // 160 (starting at cb0[10].x)
            float _ElectricShockScale; // 164 (starting at cb0[10].y)
            float4 _ElectricShockTexture_ST; // 176 (starting at cb0[11].x)
            float _ElectricShockTexturePanSpeed; // 192 (starting at cb0[12].x)
            float4 _Normal_ST; // 208 (starting at cb0[13].x)
            float4 _Albedo_ST; // 224 (starting at cb0[14].x)
            float _Irradiated; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 256 (starting at cb0[16].x)
            float4 _EmissiveColor; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 308 (starting at cb0[19].y)
            float _Fade; // 312 (starting at cb0[19].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp1.xy = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp1 = tex2D(_RMOE, tmp1.xy);
                tmp0.w = -tmp1.y * 0.96 + 0.96;
                o.sv_target.xyz = tmp0.www * tmp0.xyz;
                tmp0.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp1.yyy * tmp0.xyz + float3(0.04, 0.04, 0.04);
                o.sv_target.w = tmp1.z;
                o.sv_target1.w = 1.0 - tmp1.x;
                tmp0.xy = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp0 = tex2D(_Normal, tmp0.xy);
                tmp0.x = tmp0.w * tmp0.x;
                tmp0.xy = tmp0.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.w = dot(tmp0.xy, tmp0.xy);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.w = 1.0 - tmp0.w;
                tmp0.z = sqrt(tmp0.w);
                tmp1.x = dot(inp.texcoord1.xyz, tmp0.xyz);
                tmp1.y = dot(inp.texcoord2.xyz, tmp0.xyz);
                tmp1.z = dot(inp.texcoord3.xyz, tmp0.xyz);
                tmp0.x = dot(tmp1.xyz, tmp1.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp0.xyz = tmp0.xxx * tmp1.xyz;
                o.sv_target2.xyz = tmp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                o.sv_target2.w = 1.0;
                tmp0.xyz = tmp1.www * float3(0.2950229, 1.0, 0.0);
                tmp1.xyz = tmp1.www * _EmissiveColor.xyz;
                tmp0.w = _Irradiated != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                tmp1.x = inp.texcoord1.w;
                tmp1.y = inp.texcoord2.w;
                tmp1.z = inp.texcoord3.w;
                tmp2.z = _ElectricShockSpeed * _Time.y;
                tmp2.xy = float2(0.0, 0.0);
                tmp3.xyz = tmp1.xyz * _ElectricShockScale.xxx + tmp2.yyz;
                tmp1.xyz = tmp1.xyz * _ElectricShockScale.xxx;
                tmp4.xy = floor(tmp3.xy);
                tmp4.zw = tmp4.xy + float2(1.0, 1.0);
                tmp0.w = dot(tmp4.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp0.w = sin(tmp0.w);
                tmp0.w = tmp0.w * 43758.55;
                tmp0.w = frac(tmp0.w);
                tmp1.w = tmp3.z * 4.0;
                tmp3.xy = tmp3.xy - tmp4.xy;
                tmp2.w = tmp0.w * tmp1.w;
                tmp0.w = tmp0.w * 6.283185 + tmp2.w;
                tmp5.x = sin(tmp0.w);
                tmp6.x = cos(tmp0.w);
                tmp6.y = tmp5.x;
                tmp3.zw = tmp3.xy - float2(1.0, 1.0);
                tmp0.w = dot(tmp6.xy, tmp3.zw);
                tmp5 = tmp4.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp2.w = dot(tmp4.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.z = dot(tmp5.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.zw = sin(tmp3.zw);
                tmp3.zw = tmp3.zw * float2(43758.55, 43758.55);
                tmp3.zw = frac(tmp3.zw);
                tmp4.x = tmp1.w * tmp3.z;
                tmp3.z = tmp3.z * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.z);
                tmp5.x = cos(tmp3.z);
                tmp5.y = tmp4.x;
                tmp4 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp3.z = dot(tmp5.xy, tmp4.zw);
                tmp0.w = tmp0.w - tmp3.z;
                tmp4.zw = tmp3.xy * tmp3.xy;
                tmp5.xy = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp4.zw = tmp4.zw * tmp5.xy;
                tmp0.w = tmp4.z * tmp0.w + tmp3.z;
                tmp3.z = tmp1.w * tmp3.w;
                tmp3.z = tmp3.w * 6.283185 + tmp3.z;
                tmp5.x = sin(tmp3.z);
                tmp6.x = cos(tmp3.z);
                tmp1.w = tmp1.w * tmp2.w;
                tmp1.w = tmp2.w * 6.283185 + tmp1.w;
                tmp7.x = sin(tmp1.w);
                tmp8.x = cos(tmp1.w);
                tmp6.y = tmp5.x;
                tmp1.w = dot(tmp6.xy, tmp4.xy);
                tmp8.y = tmp7.x;
                tmp2.w = dot(tmp8.xy, tmp3.xy);
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = tmp4.z * tmp1.w + tmp2.w;
                tmp0.w = tmp0.w - tmp1.w;
                tmp0.w = tmp4.w * tmp0.w + tmp1.w;
                tmp3.xyz = tmp1.xyz * float3(2.0, 2.0, 2.0) + tmp2.xyz;
                tmp4.xy = floor(tmp3.xy);
                tmp4.zw = tmp4.xy + float2(1.0, 1.0);
                tmp1.w = dot(tmp4.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp3.z * 4.0;
                tmp3.xy = tmp3.xy - tmp4.xy;
                tmp3.z = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.z;
                tmp5.x = sin(tmp1.w);
                tmp6.x = cos(tmp1.w);
                tmp6.y = tmp5.x;
                tmp3.zw = tmp3.xy - float2(1.0, 1.0);
                tmp1.w = dot(tmp6.xy, tmp3.zw);
                tmp5 = tmp4.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.z = dot(tmp4.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.z = sin(tmp3.z);
                tmp3.z = tmp3.z * 43758.55;
                tmp3.w = dot(tmp5.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.zw = frac(tmp3.zw);
                tmp4.y = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.y;
                tmp5.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp6.y = tmp5.x;
                tmp5 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp6.xy, tmp5.zw);
                tmp1.w = tmp1.w - tmp3.w;
                tmp4.yz = tmp3.xy * tmp3.xy;
                tmp5.zw = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp4.yz = tmp4.yz * tmp5.zw;
                tmp1.w = tmp4.y * tmp1.w + tmp3.w;
                tmp3.w = tmp2.w * tmp4.x;
                tmp3.w = tmp4.x * 6.283185 + tmp3.w;
                tmp4.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp2.w = tmp2.w * tmp3.z;
                tmp2.w = tmp3.z * 6.283185 + tmp2.w;
                tmp7.x = sin(tmp2.w);
                tmp8.x = cos(tmp2.w);
                tmp6.y = tmp4.x;
                tmp2.w = dot(tmp6.xy, tmp5.xy);
                tmp8.y = tmp7.x;
                tmp3.x = dot(tmp8.xy, tmp3.xy);
                tmp2.w = tmp2.w - tmp3.x;
                tmp2.w = tmp4.y * tmp2.w + tmp3.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = tmp4.z * tmp1.w + tmp2.w;
                tmp1.w = tmp1.w * 0.7142857;
                tmp0.w = tmp0.w * 1.428571 + tmp1.w;
                tmp3.xyz = tmp1.xyz * float3(4.0, 4.0, 4.0) + tmp2.xyz;
                tmp1.xyz = tmp1.xyz * float3(8.0, 8.0, 8.0) + tmp2.xyz;
                tmp2.xy = floor(tmp3.xy);
                tmp2.zw = tmp2.xy + float2(1.0, 1.0);
                tmp1.w = dot(tmp2.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.zw = tmp1.zw * float2(4.0, 43758.55);
                tmp1.w = frac(tmp1.w);
                tmp2.z = tmp3.z * 4.0;
                tmp3.xy = tmp3.xy - tmp2.xy;
                tmp2.w = tmp1.w * tmp2.z;
                tmp1.w = tmp1.w * 6.283185 + tmp2.w;
                tmp4.x = sin(tmp1.w);
                tmp5.x = cos(tmp1.w);
                tmp5.y = tmp4.x;
                tmp3.zw = tmp3.xy - float2(1.0, 1.0);
                tmp1.w = dot(tmp5.xy, tmp3.zw);
                tmp4 = tmp2.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp2.x = dot(tmp2.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.x = sin(tmp2.x);
                tmp2.y = dot(tmp4.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = dot(tmp4.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.yw = sin(tmp2.yw);
                tmp2.xyw = tmp2.xyw * float3(43758.55, 43758.55, 43758.55);
                tmp2.xyw = frac(tmp2.xyw);
                tmp3.z = tmp2.y * tmp2.z;
                tmp2.y = tmp2.y * 6.283185 + tmp3.z;
                tmp4.x = sin(tmp2.y);
                tmp5.x = cos(tmp2.y);
                tmp5.y = tmp4.x;
                tmp4 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp2.y = dot(tmp5.xy, tmp4.zw);
                tmp1.w = tmp1.w - tmp2.y;
                tmp3.zw = tmp3.xy * tmp3.xy;
                tmp4.zw = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp3.zw = tmp3.zw * tmp4.zw;
                tmp1.w = tmp3.z * tmp1.w + tmp2.y;
                tmp2.y = tmp2.x * tmp2.z;
                tmp2.x = tmp2.x * 6.283185 + tmp2.y;
                tmp2.x = sin(tmp2.x);
                tmp5.x = cos(tmp2.x);
                tmp2.y = tmp2.w * tmp2.z;
                tmp2.y = tmp2.w * 6.283185 + tmp2.y;
                tmp6.x = sin(tmp2.y);
                tmp7.x = cos(tmp2.y);
                tmp5.y = tmp2.x;
                tmp2.x = dot(tmp5.xy, tmp3.xy);
                tmp7.y = tmp6.x;
                tmp2.y = dot(tmp7.xy, tmp4.xy);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = tmp3.z * tmp2.y + tmp2.x;
                tmp1.w = tmp1.w - tmp2.x;
                tmp1.w = tmp3.w * tmp1.w + tmp2.x;
                tmp0.w = tmp1.w * 0.3571429 + tmp0.w;
                tmp2.xy = floor(tmp1.xy);
                tmp2.zw = tmp2.xy + float2(1.0, 1.0);
                tmp1.w = dot(tmp2.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp1.xy = tmp1.xy - tmp2.xy;
                tmp2.z = tmp1.w * tmp1.z;
                tmp1.w = tmp1.w * 6.283185 + tmp2.z;
                tmp3.x = sin(tmp1.w);
                tmp4.x = cos(tmp1.w);
                tmp4.y = tmp3.x;
                tmp2.zw = tmp1.xy - float2(1.0, 1.0);
                tmp1.w = dot(tmp4.xy, tmp2.zw);
                tmp3 = tmp2.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp2.x = dot(tmp2.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.x = sin(tmp2.x);
                tmp2.x = tmp2.x * 43758.55;
                tmp2.y = dot(tmp3.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.z = dot(tmp3.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.yz = sin(tmp2.yz);
                tmp2.yz = tmp2.yz * float2(43758.55, 43758.55);
                tmp2.xyz = frac(tmp2.xyz);
                tmp2.w = tmp1.z * tmp2.y;
                tmp2.y = tmp2.y * 6.283185 + tmp2.w;
                tmp3.x = sin(tmp2.y);
                tmp4.x = cos(tmp2.y);
                tmp4.y = tmp3.x;
                tmp3 = tmp1.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp2.y = dot(tmp4.xy, tmp3.zw);
                tmp1.w = tmp1.w - tmp2.y;
                tmp3.zw = tmp1.xy * tmp1.xy;
                tmp4.xy = -tmp1.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp3.zw = tmp3.zw * tmp4.xy;
                tmp1.w = tmp3.z * tmp1.w + tmp2.y;
                tmp2.y = tmp1.z * tmp2.x;
                tmp2.x = tmp2.x * 6.283185 + tmp2.y;
                tmp2.x = sin(tmp2.x);
                tmp4.x = cos(tmp2.x);
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp2.z * 6.283185 + tmp1.z;
                tmp5.x = sin(tmp1.z);
                tmp6.x = cos(tmp1.z);
                tmp4.y = tmp2.x;
                tmp1.x = dot(tmp4.xy, tmp1.xy);
                tmp6.y = tmp5.x;
                tmp1.y = dot(tmp6.xy, tmp3.xy);
                tmp1.y = tmp1.y - tmp1.x;
                tmp1.x = tmp3.z * tmp1.y + tmp1.x;
                tmp1.y = tmp1.w - tmp1.x;
                tmp1.x = tmp3.w * tmp1.y + tmp1.x;
                tmp0.w = tmp1.x * 0.1785714 + tmp0.w;
                tmp0.w = tmp0.w * 0.5;
                tmp1.xy = -abs(tmp0.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp1.x = saturate(tmp1.x);
                tmp0.w = max(tmp1.y, 0.0);
                tmp1.x = tmp1.x * 0.1;
                tmp0.w = max(tmp0.w, tmp1.x);
                tmp1.x = _Time.y * _ElectricShockSpeed + tmp0.w;
                tmp1.x = sin(tmp1.x);
                tmp1.x = tmp1.x * 0.2 + 0.8;
                tmp1.xyz = tmp1.xxx * _ElectricShockColor.xyz;
                tmp2.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp3.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp3.y = 0.0;
                tmp2.xy = tmp2.xy + tmp3.xy;
                tmp2 = tex2D(_ElectricShockTexture, tmp2.xy);
                tmp1.xyz = tmp1.xyz * tmp2.xyz;
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp1.xyz = tmp1.xyz * _ElectricShockIntensity.xxx;
                o.sv_target3.xyz = tmp1.xyz * float3(20.0, 20.0, 20.0) + tmp0.xyz;
                o.sv_target3.w = 1.0;
                return o;
            }

            #elif LIGHTPROBE_SH
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float4 _Normal_ST; // 144 (starting at cb0[9].x)
            float4 _Albedo_ST; // 160 (starting at cb0[10].x)
            float _Irradiated; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 192 (starting at cb0[12].x)
            float4 _EmissiveColor; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 244 (starting at cb0[15].y)
            float _Fade; // 248 (starting at cb0[15].z)
            // float4 unity_SHAr; // 624 (starting at cb2[39].x)
            // float4 unity_SHAg; // 640 (starting at cb2[40].x)
            // float4 unity_SHAb; // 656 (starting at cb2[41].x)
            // float4 unity_ProbeVolumeParams; // 0 (starting at cb3[0].x)
            // float3 unity_ProbeVolumeSizeInv; // 80 (starting at cb3[5].x)
            // float3 unity_ProbeVolumeMin; // 96 (starting at cb3[6].x)
            // float4x4 unity_ProbeVolumeWorldToObject; // 16 (starting at cb3[1].x)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0.zw = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp1 = tex2D(_Normal, tmp0.zw);
                tmp1.x = tmp1.w * tmp1.x;
                tmp1.xy = tmp1.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.z = dot(tmp1.xy, tmp1.xy);
                tmp0.z = min(tmp0.z, 1.0);
                tmp0.z = 1.0 - tmp0.z;
                tmp1.z = sqrt(tmp0.z);
                tmp0.zw = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp2 = tex2D(_RMOE, tmp0.zw);
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp0.w = _Irradiated != 0.0;
                tmp3.xyz = tmp2.www * float3(0.2950229, 1.0, 0.0);
                tmp4.xyz = tmp2.www * _EmissiveColor.xyz;
                tmp3.xyz = tmp0.www ? tmp3.xyz : tmp4.xyz;
                o.sv_target1.w = 1.0 - tmp2.x;
                tmp4.x = dot(inp.texcoord1.xyz, tmp1.xyz);
                tmp4.y = dot(inp.texcoord2.xyz, tmp1.xyz);
                tmp4.z = dot(inp.texcoord3.xyz, tmp1.xyz);
                tmp0.w = dot(tmp4.xyz, tmp4.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp1.xyz = tmp0.www * tmp4.xyz;
                tmp0.w = unity_ProbeVolumeParams.x == 1.0;
                if (tmp0.w) {
                    tmp0.w = unity_ProbeVolumeParams.y == 1.0;
                    tmp4.xyz = inp.texcoord2.www * unity_ProbeVolumeWorldToObject._m01_m11_m21;
                    tmp4.xyz = unity_ProbeVolumeWorldToObject._m00_m10_m20 * inp.texcoord1.www + tmp4.xyz;
                    tmp4.xyz = unity_ProbeVolumeWorldToObject._m02_m12_m22 * inp.texcoord3.www + tmp4.xyz;
                    tmp4.xyz = tmp4.xyz + unity_ProbeVolumeWorldToObject._m03_m13_m23;
                    tmp5.y = inp.texcoord1.w;
                    tmp5.z = inp.texcoord2.w;
                    tmp5.w = inp.texcoord3.w;
                    tmp4.xyz = tmp0.www ? tmp4.xyz : tmp5.yzw;
                    tmp4.xyz = tmp4.xyz - unity_ProbeVolumeMin;
                    tmp4.yzw = tmp4.xyz * unity_ProbeVolumeSizeInv;
                    tmp0.w = tmp4.y * 0.25;
                    tmp2.x = unity_ProbeVolumeParams.z * 0.5;
                    tmp2.w = -unity_ProbeVolumeParams.z * 0.5 + 0.25;
                    tmp0.w = max(tmp0.w, tmp2.x);
                    tmp4.x = min(tmp2.w, tmp0.w);
                    tmp5 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xzw);
                    tmp6.xyz = tmp4.xzw + float3(0.25, 0.0, 0.0);
                    tmp6 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp6.xyz);
                    tmp4.xyz = tmp4.xzw + float3(0.5, 0.0, 0.0);
                    tmp4 = UNITY_SAMPLE_TEX3D_SAMPLER(unity_ProbeVolumeSH, unity_ProbeVolumeSH, tmp4.xyz);
                    tmp1.w = 1.0;
                    tmp5.x = dot(tmp5, tmp1);
                    tmp5.y = dot(tmp6, tmp1);
                    tmp5.z = dot(tmp4, tmp1);
                } else {
                    tmp1.w = 1.0;
                    tmp5.x = dot(unity_SHAr, tmp1);
                    tmp5.y = dot(unity_SHAg, tmp1);
                    tmp5.z = dot(unity_SHAb, tmp1);
                }
                tmp4.xyz = tmp5.xyz + inp.texcoord7.xyz;
                tmp4.xyz = max(tmp4.xyz, float3(0.0, 0.0, 0.0));
                tmp4.xyz = tmp2.zzz * tmp4.xyz;
                tmp5.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp2.yyy * tmp5.xyz + float3(0.04, 0.04, 0.04);
                tmp0.w = -tmp2.y * 0.96 + 0.96;
                tmp0.xyz = tmp0.www * tmp0.xyz;
                o.sv_target2.xyz = tmp1.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                tmp1.xyz = tmp0.xyz * tmp4.xyz + tmp3.xyz;
                o.sv_target3.xyz = pow(2.0, -tmp1.xyz);
                o.sv_target.w = tmp2.z;
                o.sv_target.xyz = tmp0.xyz;
                o.sv_target2.w = 1.0;
                o.sv_target3.w = 1.0;
                return o;
            }

            #elif UNITY_HDR_ON
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float4 _Normal_ST; // 144 (starting at cb0[9].x)
            float4 _Albedo_ST; // 160 (starting at cb0[10].x)
            float _Irradiated; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 192 (starting at cb0[12].x)
            float4 _EmissiveColor; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 244 (starting at cb0[15].y)
            float _Fade; // 248 (starting at cb0[15].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp1.xy = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp1 = tex2D(_RMOE, tmp1.xy);
                tmp0.w = -tmp1.y * 0.96 + 0.96;
                o.sv_target.xyz = tmp0.www * tmp0.xyz;
                tmp0.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp1.yyy * tmp0.xyz + float3(0.04, 0.04, 0.04);
                o.sv_target.w = tmp1.z;
                o.sv_target1.w = 1.0 - tmp1.x;
                tmp0.xy = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp0 = tex2D(_Normal, tmp0.xy);
                tmp0.x = tmp0.w * tmp0.x;
                tmp0.xy = tmp0.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.w = dot(tmp0.xy, tmp0.xy);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.w = 1.0 - tmp0.w;
                tmp0.z = sqrt(tmp0.w);
                tmp1.x = dot(inp.texcoord1.xyz, tmp0.xyz);
                tmp1.y = dot(inp.texcoord2.xyz, tmp0.xyz);
                tmp1.z = dot(inp.texcoord3.xyz, tmp0.xyz);
                tmp0.x = dot(tmp1.xyz, tmp1.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp0.xyz = tmp0.xxx * tmp1.xyz;
                o.sv_target2.xyz = tmp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                o.sv_target2.w = 1.0;
                tmp0.xyz = tmp1.www * float3(0.2950229, 1.0, 0.0);
                tmp1.xyz = tmp1.www * _EmissiveColor.xyz;
                tmp0.w = _Irradiated != 0.0;
                o.sv_target3.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                o.sv_target3.w = 1.0;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float _ElectricShockIntensity; // 132 (starting at cb0[8].y)
            float4 _ElectricShockColor; // 144 (starting at cb0[9].x)
            float _ElectricShockSpeed; // 160 (starting at cb0[10].x)
            float _ElectricShockScale; // 164 (starting at cb0[10].y)
            float4 _ElectricShockTexture_ST; // 176 (starting at cb0[11].x)
            float _ElectricShockTexturePanSpeed; // 192 (starting at cb0[12].x)
            float4 _Normal_ST; // 208 (starting at cb0[13].x)
            float4 _Albedo_ST; // 224 (starting at cb0[14].x)
            float _Irradiated; // 240 (starting at cb0[15].x)
            float4 _RMOE_ST; // 256 (starting at cb0[16].x)
            float4 _EmissiveColor; // 272 (starting at cb0[17].x)
            float _FirstPerson; // 308 (starting at cb0[19].y)
            float _Fade; // 312 (starting at cb0[19].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3
            sampler2D _ElectricShockTexture; // 4

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                float4 tmp3;
                float4 tmp4;
                float4 tmp5;
                float4 tmp6;
                float4 tmp7;
                float4 tmp8;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp1.xy = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp1 = tex2D(_RMOE, tmp1.xy);
                tmp0.w = -tmp1.y * 0.96 + 0.96;
                o.sv_target.xyz = tmp0.www * tmp0.xyz;
                tmp0.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp1.yyy * tmp0.xyz + float3(0.04, 0.04, 0.04);
                o.sv_target.w = tmp1.z;
                o.sv_target1.w = 1.0 - tmp1.x;
                tmp0.xy = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp0 = tex2D(_Normal, tmp0.xy);
                tmp0.x = tmp0.w * tmp0.x;
                tmp0.xy = tmp0.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.w = dot(tmp0.xy, tmp0.xy);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.w = 1.0 - tmp0.w;
                tmp0.z = sqrt(tmp0.w);
                tmp1.x = dot(inp.texcoord1.xyz, tmp0.xyz);
                tmp1.y = dot(inp.texcoord2.xyz, tmp0.xyz);
                tmp1.z = dot(inp.texcoord3.xyz, tmp0.xyz);
                tmp0.x = dot(tmp1.xyz, tmp1.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp0.xyz = tmp0.xxx * tmp1.xyz;
                o.sv_target2.xyz = tmp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                o.sv_target2.w = 1.0;
                tmp0.xyz = tmp1.www * float3(0.2950229, 1.0, 0.0);
                tmp1.xyz = tmp1.www * _EmissiveColor.xyz;
                tmp0.w = _Irradiated != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                tmp1.x = inp.texcoord1.w;
                tmp1.y = inp.texcoord2.w;
                tmp1.z = inp.texcoord3.w;
                tmp2.z = _ElectricShockSpeed * _Time.y;
                tmp2.xy = float2(0.0, 0.0);
                tmp3.xyz = tmp1.xyz * _ElectricShockScale.xxx + tmp2.yyz;
                tmp1.xyz = tmp1.xyz * _ElectricShockScale.xxx;
                tmp4.xy = floor(tmp3.xy);
                tmp4.zw = tmp4.xy + float2(1.0, 1.0);
                tmp0.w = dot(tmp4.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp0.w = sin(tmp0.w);
                tmp0.w = tmp0.w * 43758.55;
                tmp0.w = frac(tmp0.w);
                tmp1.w = tmp3.z * 4.0;
                tmp3.xy = tmp3.xy - tmp4.xy;
                tmp2.w = tmp0.w * tmp1.w;
                tmp0.w = tmp0.w * 6.283185 + tmp2.w;
                tmp5.x = sin(tmp0.w);
                tmp6.x = cos(tmp0.w);
                tmp6.y = tmp5.x;
                tmp3.zw = tmp3.xy - float2(1.0, 1.0);
                tmp0.w = dot(tmp6.xy, tmp3.zw);
                tmp5 = tmp4.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp2.w = dot(tmp4.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = sin(tmp2.w);
                tmp2.w = tmp2.w * 43758.55;
                tmp2.w = frac(tmp2.w);
                tmp3.z = dot(tmp5.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.w = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.zw = sin(tmp3.zw);
                tmp3.zw = tmp3.zw * float2(43758.55, 43758.55);
                tmp3.zw = frac(tmp3.zw);
                tmp4.x = tmp1.w * tmp3.z;
                tmp3.z = tmp3.z * 6.283185 + tmp4.x;
                tmp4.x = sin(tmp3.z);
                tmp5.x = cos(tmp3.z);
                tmp5.y = tmp4.x;
                tmp4 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp3.z = dot(tmp5.xy, tmp4.zw);
                tmp0.w = tmp0.w - tmp3.z;
                tmp4.zw = tmp3.xy * tmp3.xy;
                tmp5.xy = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp4.zw = tmp4.zw * tmp5.xy;
                tmp0.w = tmp4.z * tmp0.w + tmp3.z;
                tmp3.z = tmp1.w * tmp3.w;
                tmp3.z = tmp3.w * 6.283185 + tmp3.z;
                tmp5.x = sin(tmp3.z);
                tmp6.x = cos(tmp3.z);
                tmp1.w = tmp1.w * tmp2.w;
                tmp1.w = tmp2.w * 6.283185 + tmp1.w;
                tmp7.x = sin(tmp1.w);
                tmp8.x = cos(tmp1.w);
                tmp6.y = tmp5.x;
                tmp1.w = dot(tmp6.xy, tmp4.xy);
                tmp8.y = tmp7.x;
                tmp2.w = dot(tmp8.xy, tmp3.xy);
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = tmp4.z * tmp1.w + tmp2.w;
                tmp0.w = tmp0.w - tmp1.w;
                tmp0.w = tmp4.w * tmp0.w + tmp1.w;
                tmp3.xyz = tmp1.xyz * float3(2.0, 2.0, 2.0) + tmp2.xyz;
                tmp4.xy = floor(tmp3.xy);
                tmp4.zw = tmp4.xy + float2(1.0, 1.0);
                tmp1.w = dot(tmp4.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp2.w = tmp3.z * 4.0;
                tmp3.xy = tmp3.xy - tmp4.xy;
                tmp3.z = tmp1.w * tmp2.w;
                tmp1.w = tmp1.w * 6.283185 + tmp3.z;
                tmp5.x = sin(tmp1.w);
                tmp6.x = cos(tmp1.w);
                tmp6.y = tmp5.x;
                tmp3.zw = tmp3.xy - float2(1.0, 1.0);
                tmp1.w = dot(tmp6.xy, tmp3.zw);
                tmp5 = tmp4.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp3.z = dot(tmp4.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp3.z = sin(tmp3.z);
                tmp3.z = tmp3.z * 43758.55;
                tmp3.w = dot(tmp5.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = dot(tmp5.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp4.x = sin(tmp4.x);
                tmp4.x = tmp4.x * 43758.55;
                tmp4.x = frac(tmp4.x);
                tmp3.w = sin(tmp3.w);
                tmp3.w = tmp3.w * 43758.55;
                tmp3.zw = frac(tmp3.zw);
                tmp4.y = tmp2.w * tmp3.w;
                tmp3.w = tmp3.w * 6.283185 + tmp4.y;
                tmp5.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp6.y = tmp5.x;
                tmp5 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp3.w = dot(tmp6.xy, tmp5.zw);
                tmp1.w = tmp1.w - tmp3.w;
                tmp4.yz = tmp3.xy * tmp3.xy;
                tmp5.zw = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp4.yz = tmp4.yz * tmp5.zw;
                tmp1.w = tmp4.y * tmp1.w + tmp3.w;
                tmp3.w = tmp2.w * tmp4.x;
                tmp3.w = tmp4.x * 6.283185 + tmp3.w;
                tmp4.x = sin(tmp3.w);
                tmp6.x = cos(tmp3.w);
                tmp2.w = tmp2.w * tmp3.z;
                tmp2.w = tmp3.z * 6.283185 + tmp2.w;
                tmp7.x = sin(tmp2.w);
                tmp8.x = cos(tmp2.w);
                tmp6.y = tmp4.x;
                tmp2.w = dot(tmp6.xy, tmp5.xy);
                tmp8.y = tmp7.x;
                tmp3.x = dot(tmp8.xy, tmp3.xy);
                tmp2.w = tmp2.w - tmp3.x;
                tmp2.w = tmp4.y * tmp2.w + tmp3.x;
                tmp1.w = tmp1.w - tmp2.w;
                tmp1.w = tmp4.z * tmp1.w + tmp2.w;
                tmp1.w = tmp1.w * 0.7142857;
                tmp0.w = tmp0.w * 1.428571 + tmp1.w;
                tmp3.xyz = tmp1.xyz * float3(4.0, 4.0, 4.0) + tmp2.xyz;
                tmp1.xyz = tmp1.xyz * float3(8.0, 8.0, 8.0) + tmp2.xyz;
                tmp2.xy = floor(tmp3.xy);
                tmp2.zw = tmp2.xy + float2(1.0, 1.0);
                tmp1.w = dot(tmp2.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.zw = tmp1.zw * float2(4.0, 43758.55);
                tmp1.w = frac(tmp1.w);
                tmp2.z = tmp3.z * 4.0;
                tmp3.xy = tmp3.xy - tmp2.xy;
                tmp2.w = tmp1.w * tmp2.z;
                tmp1.w = tmp1.w * 6.283185 + tmp2.w;
                tmp4.x = sin(tmp1.w);
                tmp5.x = cos(tmp1.w);
                tmp5.y = tmp4.x;
                tmp3.zw = tmp3.xy - float2(1.0, 1.0);
                tmp1.w = dot(tmp5.xy, tmp3.zw);
                tmp4 = tmp2.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp2.x = dot(tmp2.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.x = sin(tmp2.x);
                tmp2.y = dot(tmp4.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.w = dot(tmp4.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.yw = sin(tmp2.yw);
                tmp2.xyw = tmp2.xyw * float3(43758.55, 43758.55, 43758.55);
                tmp2.xyw = frac(tmp2.xyw);
                tmp3.z = tmp2.y * tmp2.z;
                tmp2.y = tmp2.y * 6.283185 + tmp3.z;
                tmp4.x = sin(tmp2.y);
                tmp5.x = cos(tmp2.y);
                tmp5.y = tmp4.x;
                tmp4 = tmp3.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp2.y = dot(tmp5.xy, tmp4.zw);
                tmp1.w = tmp1.w - tmp2.y;
                tmp3.zw = tmp3.xy * tmp3.xy;
                tmp4.zw = -tmp3.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp3.zw = tmp3.zw * tmp4.zw;
                tmp1.w = tmp3.z * tmp1.w + tmp2.y;
                tmp2.y = tmp2.x * tmp2.z;
                tmp2.x = tmp2.x * 6.283185 + tmp2.y;
                tmp2.x = sin(tmp2.x);
                tmp5.x = cos(tmp2.x);
                tmp2.y = tmp2.w * tmp2.z;
                tmp2.y = tmp2.w * 6.283185 + tmp2.y;
                tmp6.x = sin(tmp2.y);
                tmp7.x = cos(tmp2.y);
                tmp5.y = tmp2.x;
                tmp2.x = dot(tmp5.xy, tmp3.xy);
                tmp7.y = tmp6.x;
                tmp2.y = dot(tmp7.xy, tmp4.xy);
                tmp2.y = tmp2.y - tmp2.x;
                tmp2.x = tmp3.z * tmp2.y + tmp2.x;
                tmp1.w = tmp1.w - tmp2.x;
                tmp1.w = tmp3.w * tmp1.w + tmp2.x;
                tmp0.w = tmp1.w * 0.3571429 + tmp0.w;
                tmp2.xy = floor(tmp1.xy);
                tmp2.zw = tmp2.xy + float2(1.0, 1.0);
                tmp1.w = dot(tmp2.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp1.w = sin(tmp1.w);
                tmp1.w = tmp1.w * 43758.55;
                tmp1.w = frac(tmp1.w);
                tmp1.xy = tmp1.xy - tmp2.xy;
                tmp2.z = tmp1.w * tmp1.z;
                tmp1.w = tmp1.w * 6.283185 + tmp2.z;
                tmp3.x = sin(tmp1.w);
                tmp4.x = cos(tmp1.w);
                tmp4.y = tmp3.x;
                tmp2.zw = tmp1.xy - float2(1.0, 1.0);
                tmp1.w = dot(tmp4.xy, tmp2.zw);
                tmp3 = tmp2.xyxy + float4(1.0, 0.0, 0.0, 1.0);
                tmp2.x = dot(tmp2.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.x = sin(tmp2.x);
                tmp2.x = tmp2.x * 43758.55;
                tmp2.y = dot(tmp3.zw, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.z = dot(tmp3.xy, float4(12.9898, 78.233, 0.0, 0.0));
                tmp2.yz = sin(tmp2.yz);
                tmp2.yz = tmp2.yz * float2(43758.55, 43758.55);
                tmp2.xyz = frac(tmp2.xyz);
                tmp2.w = tmp1.z * tmp2.y;
                tmp2.y = tmp2.y * 6.283185 + tmp2.w;
                tmp3.x = sin(tmp2.y);
                tmp4.x = cos(tmp2.y);
                tmp4.y = tmp3.x;
                tmp3 = tmp1.xyxy - float4(1.0, 0.0, 0.0, 1.0);
                tmp2.y = dot(tmp4.xy, tmp3.zw);
                tmp1.w = tmp1.w - tmp2.y;
                tmp3.zw = tmp1.xy * tmp1.xy;
                tmp4.xy = -tmp1.xy * float2(2.0, 2.0) + float2(3.0, 3.0);
                tmp3.zw = tmp3.zw * tmp4.xy;
                tmp1.w = tmp3.z * tmp1.w + tmp2.y;
                tmp2.y = tmp1.z * tmp2.x;
                tmp2.x = tmp2.x * 6.283185 + tmp2.y;
                tmp2.x = sin(tmp2.x);
                tmp4.x = cos(tmp2.x);
                tmp1.z = tmp1.z * tmp2.z;
                tmp1.z = tmp2.z * 6.283185 + tmp1.z;
                tmp5.x = sin(tmp1.z);
                tmp6.x = cos(tmp1.z);
                tmp4.y = tmp2.x;
                tmp1.x = dot(tmp4.xy, tmp1.xy);
                tmp6.y = tmp5.x;
                tmp1.y = dot(tmp6.xy, tmp3.xy);
                tmp1.y = tmp1.y - tmp1.x;
                tmp1.x = tmp3.z * tmp1.y + tmp1.x;
                tmp1.y = tmp1.w - tmp1.x;
                tmp1.x = tmp3.w * tmp1.y + tmp1.x;
                tmp0.w = tmp1.x * 0.1785714 + tmp0.w;
                tmp0.w = tmp0.w * 0.5;
                tmp1.xy = -abs(tmp0.ww) * float2(10.0, 15.0) + float2(2.0, 1.0);
                tmp1.x = saturate(tmp1.x);
                tmp0.w = max(tmp1.y, 0.0);
                tmp1.x = tmp1.x * 0.1;
                tmp0.w = max(tmp0.w, tmp1.x);
                tmp1.x = _Time.y * _ElectricShockSpeed + tmp0.w;
                tmp1.x = sin(tmp1.x);
                tmp1.x = tmp1.x * 0.2 + 0.8;
                tmp1.xyz = tmp1.xxx * _ElectricShockColor.xyz;
                tmp2.xy = inp.texcoord.xy * _ElectricShockTexture_ST.xy + _ElectricShockTexture_ST.zw;
                tmp3.x = _ElectricShockTexturePanSpeed * _Time.y;
                tmp3.y = 0.0;
                tmp2.xy = tmp2.xy + tmp3.xy;
                tmp2 = tex2D(_ElectricShockTexture, tmp2.xy);
                tmp1.xyz = tmp1.xyz * tmp2.xyz;
                tmp1.xyz = tmp0.www * tmp1.xyz;
                tmp1.xyz = tmp1.xyz * _ElectricShockIntensity.xxx;
                tmp0.xyz = tmp1.xyz * float3(20.0, 20.0, 20.0) + tmp0.xyz;
                o.sv_target3.xyz = pow(2.0, -tmp0.xyz);
                o.sv_target3.w = 1.0;
                return o;
            }

            #else
            struct fout
            {
                float4 sv_target : SV_Target;
                float4 sv_target1 : SV_Target1;
                float4 sv_target2 : SV_Target2;
                float4 sv_target3 : SV_Target3;
            };

            // CBs for DX11PixelSM40
            float4 _Normal_ST; // 144 (starting at cb0[9].x)
            float4 _Albedo_ST; // 160 (starting at cb0[10].x)
            float _Irradiated; // 176 (starting at cb0[11].x)
            float4 _RMOE_ST; // 192 (starting at cb0[12].x)
            float4 _EmissiveColor; // 208 (starting at cb0[13].x)
            float _FirstPerson; // 244 (starting at cb0[15].y)
            float _Fade; // 248 (starting at cb0[15].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0
            sampler2D _Normal; // 1
            sampler2D _RMOE; // 2
            sampler2D _Albedo; // 3

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                float4 tmp1;
                tmp0.xy = inp.texcoord4.xy / inp.texcoord4.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.xy = inp.texcoord.xy * _Albedo_ST.xy + _Albedo_ST.zw;
                tmp0 = tex2D(_Albedo, tmp0.xy);
                tmp1.xy = inp.texcoord.xy * _RMOE_ST.xy + _RMOE_ST.zw;
                tmp1 = tex2D(_RMOE, tmp1.xy);
                tmp0.w = -tmp1.y * 0.96 + 0.96;
                o.sv_target.xyz = tmp0.www * tmp0.xyz;
                tmp0.xyz = tmp0.xyz - float3(0.04, 0.04, 0.04);
                o.sv_target1.xyz = tmp1.yyy * tmp0.xyz + float3(0.04, 0.04, 0.04);
                o.sv_target.w = tmp1.z;
                o.sv_target1.w = 1.0 - tmp1.x;
                tmp0.xy = inp.texcoord.xy * _Normal_ST.xy + _Normal_ST.zw;
                tmp0 = tex2D(_Normal, tmp0.xy);
                tmp0.x = tmp0.w * tmp0.x;
                tmp0.xy = tmp0.xy * float2(2.0, 2.0) + float2(-1.0, -1.0);
                tmp0.w = dot(tmp0.xy, tmp0.xy);
                tmp0.w = min(tmp0.w, 1.0);
                tmp0.w = 1.0 - tmp0.w;
                tmp0.z = sqrt(tmp0.w);
                tmp1.x = dot(inp.texcoord1.xyz, tmp0.xyz);
                tmp1.y = dot(inp.texcoord2.xyz, tmp0.xyz);
                tmp1.z = dot(inp.texcoord3.xyz, tmp0.xyz);
                tmp0.x = dot(tmp1.xyz, tmp1.xyz);
                tmp0.x = rsqrt(tmp0.x);
                tmp0.xyz = tmp0.xxx * tmp1.xyz;
                o.sv_target2.xyz = tmp0.xyz * float3(0.5, 0.5, 0.5) + float3(0.5, 0.5, 0.5);
                o.sv_target2.w = 1.0;
                tmp0.xyz = tmp1.www * float3(0.2950229, 1.0, 0.0);
                tmp1.xyz = tmp1.www * _EmissiveColor.xyz;
                tmp0.w = _Irradiated != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                o.sv_target3.xyz = pow(2.0, -tmp0.xyz);
                o.sv_target3.w = 1.0;
                return o;
            }
            #endif
            ENDCG
            
        }
        Pass {
            Name "ShadowCaster"
            ZClip On
            Tags {
                "IsEmissive"="true"
                "LIGHTMODE"="SHADOWCASTER"
                "QUEUE"="Geometry+0"
                "RenderType"="Opaque"
                "SHADOWSUPPORT"="true"
            }
            CGPROGRAM
            
            #pragma vertex vert
            #pragma fragment frag

            #pragma multi_compile SHADOWS_DEPTH SHADOWS_CUBE
            #pragma shader_feature _ELECTRIC_SHOCK_ON
            

            #if _ELECTRIC_SHOCK_ON && SHADOWS_DEPTH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float3 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 color : COLOR;
            };

            // CBs for DX11VertexSM40
            // float4 unity_LightShadowBias; // 80 (starting at cb1[5].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp1 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp1 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp1;
                tmp1 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp1;
                tmp1 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp1;
                tmp2.xyz = -tmp1.xyz * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp2.xyz);
                tmp0.w = -tmp0.w * tmp0.w + 1.0;
                tmp0.w = sqrt(tmp0.w);
                tmp0.w = tmp0.w * unity_LightShadowBias.z;
                tmp0.xyz = -tmp0.xyz * tmp0.www + tmp1.xyz;
                tmp0.w = unity_LightShadowBias.z != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                tmp2 = tmp0.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp0.xxxx + tmp2;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp0.zzzz + tmp2;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                tmp1.x = unity_LightShadowBias.x / tmp0.w;
                tmp1.x = min(tmp1.x, 0.0);
                tmp1.x = max(tmp1.x, -1.0);
                tmp0.z = tmp0.z + tmp1.x;
                tmp1.x = min(tmp0.w, tmp0.z);
                o.position.xyw = tmp0.xyw;
                tmp0.x = tmp1.x - tmp0.z;
                o.position.z = unity_LightShadowBias.y * tmp0.x + tmp0.z;
                tmp0.xyz = v.vertex.yyy * unity_ObjectToWorld._m01_m11_m21;
                tmp0.xyz = unity_ObjectToWorld._m00_m10_m20 * v.vertex.xxx + tmp0.xyz;
                tmp0.xyz = unity_ObjectToWorld._m02_m12_m22 * v.vertex.zzz + tmp0.xyz;
                o.texcoord1.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                o.texcoord2 = float4(0.0, 0.0, 0.0, 0.0);
                o.color = v.color;
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SHADOWS_CUBE
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float3 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 color : COLOR;
            };

            // CBs for DX11VertexSM40
            // float4 unity_LightShadowBias; // 80 (starting at cb1[5].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp1 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp1 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp1;
                tmp1 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp1;
                tmp1 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp1;
                tmp2.xyz = -tmp1.xyz * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp2.xyz);
                tmp0.w = -tmp0.w * tmp0.w + 1.0;
                tmp0.w = sqrt(tmp0.w);
                tmp0.w = tmp0.w * unity_LightShadowBias.z;
                tmp0.xyz = -tmp0.xyz * tmp0.www + tmp1.xyz;
                tmp0.w = unity_LightShadowBias.z != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                tmp2 = tmp0.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp0.xxxx + tmp2;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp0.zzzz + tmp2;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                tmp1.x = min(tmp0.w, tmp0.z);
                tmp1.x = tmp1.x - tmp0.z;
                o.position.z = unity_LightShadowBias.y * tmp1.x + tmp0.z;
                o.position.xyw = tmp0.xyw;
                tmp0.xyz = v.vertex.yyy * unity_ObjectToWorld._m01_m11_m21;
                tmp0.xyz = unity_ObjectToWorld._m00_m10_m20 * v.vertex.xxx + tmp0.xyz;
                tmp0.xyz = unity_ObjectToWorld._m02_m12_m22 * v.vertex.zzz + tmp0.xyz;
                o.texcoord1.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                o.texcoord2 = float4(0.0, 0.0, 0.0, 0.0);
                o.color = v.color;
                return o;
            }

            #elif SHADOWS_DEPTH
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float3 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 color : COLOR;
            };

            // CBs for DX11VertexSM40
            // float4 unity_LightShadowBias; // 80 (starting at cb1[5].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp1 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp1 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp1;
                tmp1 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp1;
                tmp1 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp1;
                tmp2.xyz = -tmp1.xyz * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp2.xyz);
                tmp0.w = -tmp0.w * tmp0.w + 1.0;
                tmp0.w = sqrt(tmp0.w);
                tmp0.w = tmp0.w * unity_LightShadowBias.z;
                tmp0.xyz = -tmp0.xyz * tmp0.www + tmp1.xyz;
                tmp0.w = unity_LightShadowBias.z != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                tmp2 = tmp0.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp0.xxxx + tmp2;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp0.zzzz + tmp2;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                tmp1.x = unity_LightShadowBias.x / tmp0.w;
                tmp1.x = min(tmp1.x, 0.0);
                tmp1.x = max(tmp1.x, -1.0);
                tmp0.z = tmp0.z + tmp1.x;
                tmp1.x = min(tmp0.w, tmp0.z);
                o.position.xyw = tmp0.xyw;
                tmp0.x = tmp1.x - tmp0.z;
                o.position.z = unity_LightShadowBias.y * tmp0.x + tmp0.z;
                tmp0.xyz = v.vertex.yyy * unity_ObjectToWorld._m01_m11_m21;
                tmp0.xyz = unity_ObjectToWorld._m00_m10_m20 * v.vertex.xxx + tmp0.xyz;
                tmp0.xyz = unity_ObjectToWorld._m02_m12_m22 * v.vertex.zzz + tmp0.xyz;
                o.texcoord1.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                o.texcoord2 = float4(0.0, 0.0, 0.0, 0.0);
                o.color = v.color;
                return o;
            }

            #else
            struct appdata
            {
                float4 vertex : POSITION;
                float4 tangent : TANGENT;
                float3 normal : NORMAL;
                float4 texcoord : TEXCOORD;
                float4 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 texcoord3 : TEXCOORD3;
                float4 color : COLOR;
            };
            struct v2f
            {
                float4 position : SV_POSITION;
                float3 texcoord1 : TEXCOORD1;
                float4 texcoord2 : TEXCOORD2;
                float4 color : COLOR;
            };

            // CBs for DX11VertexSM40
            // float4 unity_LightShadowBias; // 80 (starting at cb1[5].x)
            // Textures for DX11VertexSM40

            v2f vert(appdata v)
            {
                v2f o;
                float4 tmp0;
                float4 tmp1;
                float4 tmp2;
                tmp0.x = dot(v.normal.xyz, unity_WorldToObject._m00_m10_m20);
                tmp0.y = dot(v.normal.xyz, unity_WorldToObject._m01_m11_m21);
                tmp0.z = dot(v.normal.xyz, unity_WorldToObject._m02_m12_m22);
                tmp0.w = dot(tmp0.xyz, tmp0.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp0.xyz = tmp0.www * tmp0.xyz;
                tmp1 = v.vertex.yyyy * unity_ObjectToWorld._m01_m11_m21_m31;
                tmp1 = unity_ObjectToWorld._m00_m10_m20_m30 * v.vertex.xxxx + tmp1;
                tmp1 = unity_ObjectToWorld._m02_m12_m22_m32 * v.vertex.zzzz + tmp1;
                tmp1 = unity_ObjectToWorld._m03_m13_m23_m33 * v.vertex.wwww + tmp1;
                tmp2.xyz = -tmp1.xyz * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
                tmp0.w = dot(tmp2.xyz, tmp2.xyz);
                tmp0.w = rsqrt(tmp0.w);
                tmp2.xyz = tmp0.www * tmp2.xyz;
                tmp0.w = dot(tmp0.xyz, tmp2.xyz);
                tmp0.w = -tmp0.w * tmp0.w + 1.0;
                tmp0.w = sqrt(tmp0.w);
                tmp0.w = tmp0.w * unity_LightShadowBias.z;
                tmp0.xyz = -tmp0.xyz * tmp0.www + tmp1.xyz;
                tmp0.w = unity_LightShadowBias.z != 0.0;
                tmp0.xyz = tmp0.www ? tmp0.xyz : tmp1.xyz;
                tmp2 = tmp0.yyyy * unity_MatrixVP._m01_m11_m21_m31;
                tmp2 = unity_MatrixVP._m00_m10_m20_m30 * tmp0.xxxx + tmp2;
                tmp0 = unity_MatrixVP._m02_m12_m22_m32 * tmp0.zzzz + tmp2;
                tmp0 = unity_MatrixVP._m03_m13_m23_m33 * tmp1.wwww + tmp0;
                tmp1.x = min(tmp0.w, tmp0.z);
                tmp1.x = tmp1.x - tmp0.z;
                o.position.z = unity_LightShadowBias.y * tmp1.x + tmp0.z;
                o.position.xyw = tmp0.xyw;
                tmp0.xyz = v.vertex.yyy * unity_ObjectToWorld._m01_m11_m21;
                tmp0.xyz = unity_ObjectToWorld._m00_m10_m20 * v.vertex.xxx + tmp0.xyz;
                tmp0.xyz = unity_ObjectToWorld._m02_m12_m22 * v.vertex.zzz + tmp0.xyz;
                o.texcoord1.xyz = unity_ObjectToWorld._m03_m13_m23 * v.vertex.www + tmp0.xyz;
                o.texcoord2 = float4(0.0, 0.0, 0.0, 0.0);
                o.color = v.color;
                return o;
            }
            #endif


            #if _ELECTRIC_SHOCK_ON && SHADOWS_DEPTH
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _FirstPerson; // 308 (starting at cb0[19].y)
            float _Fade; // 312 (starting at cb0[19].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                tmp0.xy = inp.texcoord2.xy / inp.texcoord2.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                o.sv_target = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif _ELECTRIC_SHOCK_ON && SHADOWS_CUBE
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _FirstPerson; // 308 (starting at cb0[19].y)
            float _Fade; // 312 (starting at cb0[19].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                tmp0.xy = inp.texcoord2.xy / inp.texcoord2.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                o.sv_target = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #elif SHADOWS_DEPTH
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _FirstPerson; // 244 (starting at cb0[15].y)
            float _Fade; // 248 (starting at cb0[15].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                tmp0.xy = inp.texcoord2.xy / inp.texcoord2.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                o.sv_target = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }

            #else
            struct fout
            {
                float4 sv_target : SV_Target;
            };

            // CBs for DX11PixelSM40
            float _FirstPerson; // 244 (starting at cb0[15].y)
            float _Fade; // 248 (starting at cb0[15].z)
            // Textures for DX11PixelSM40
            sampler2D unity_DitherMask; // 0

            fout frag(v2f inp)
            {
                fout o;
                float4 tmp0;
                tmp0.xy = inp.texcoord2.xy / inp.texcoord2.ww;
                tmp0.xy = tmp0.xy * _ScreenParams.xy;
                tmp0.xy = tmp0.xy * float2(0.25, 0.25);
                tmp0 = tex2D(unity_DitherMask, tmp0.xy);
                tmp0.x = _Fade - tmp0.w;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                tmp0.x = inp.color.x * -_FirstPerson;
                tmp0.x = tmp0.x < 0.0;
                if (tmp0.x) {
                    discard;
                }
                o.sv_target = float4(0.0, 0.0, 0.0, 0.0);
                return o;
            }
            #endif
            ENDCG
            
        }
    }
	//CustomEditor "ASEMaterialInspector" // Amplify Shader Editor - Unity asset store package
}
